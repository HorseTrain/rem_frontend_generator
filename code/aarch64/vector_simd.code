int lowest_bit_set_c(int source)
{
    int size = 32;

    loop (size) i
    {
        int working_bit = (source >> i) & 1;

        if (working_bit)
        {
            return i;
        }
    }

    return size;
}

void dup_element(int index, int esize, int elements, int n, int d)
{
    o128 operand = V(n);
    o128 result = vector_zero;

    o64 element = elm operand index esize;

    loop (elements) e
    {
        elm result e esize element;
    }

    V(d, result);
}

int expand_imm(int op, int cmode, int imm8)
{
    int imm64 = 0;
    int cmode_test = bits_c(cmode, 3, 1);

    if (cmode_test == 0)
    {
        imm64 = replicate_c(imm8, 32, 2);
    }
    else if (cmode_test == 1)
    {
        imm64 = replicate_c(imm8 << 8, 32, 2);
    }
    else if (cmode_test == 2)
    {
        imm64 = replicate_c(imm8 << 16, 32, 2);
    }
    else if (cmode_test == 3)
    {
        imm64 = replicate_c(imm8 << 24, 32, 2);
    }
    else if (cmode_test == 4)
    {
        imm64 = replicate_c(imm8, 16, 4);
    }
    else if (cmode_test == 5)
    {
        imm64 = replicate_c(imm8 << 8, 16, 4);
    }
    else if (cmode_test == 6)
    {
        if ((cmode & 1) == 0)
        {
            imm64 = replicate_c((imm8 << 8) | ones(8), 32, 2);
        }
        else
        {
            imm64 = replicate_c((imm8 << 16) | ones(16), 32, 2);
        }
    }
    else if (cmode_test == 7)
    {
        if (bit_c(cmode, 0) == 0 && op == 0)
        {
            imm64 = replicate_c(imm8, 8, 8);
        }
        else if (bit_c(cmode, 0) == 0 && op == 1)
        {
            loop (8) i
            {
                int part = (0 - ((imm8 >> i) & 1)) & UINT8_MAX;

                imm64 = imm64 | (part << (i * 8));
            }
        }
        else if (bit_c(cmode, 0) == 1 && op == 0)
        {
            int p0 = bit_c(imm8, 7);                    //1
            int p1 = (~(bit_c(imm8, 6))) & 1;           //1
            int p2 = replicate_c(bit_c(imm8, 6),1,5);   //5
            int p3 = bits_c(imm8, 5, 0);                //6
            int p4 = 0;                                 //19
            
            int working = p4 | (p3 << 19) | (p2 << (19 + 6)) | (p1 << (19 + 6 + 5)) | (p0 << (19 + 6 + 5 + 1));

            imm64 = replicate_c(working, 32, 2);
        }
        else if (bit_c(cmode, 0) == 1 && op == 1)
        {
            int p0 = bit_c(imm8, 7);                    //1
            int p1 = (~(bit_c(imm8, 6))) & 1;           //1
            int p2 = replicate_c(bit_c(imm8, 6),1,8);   //8
            int p3 = bits_c(imm8, 5, 0);                //6
            int p4 = 0;                                 //48

            imm64 = p4 | (p3 << 48) | (p2 << (48 + 6)) | (p1 << (48 + 6 + 8)) | (p0 << (48 + 6 + 8 + 1));
        }
        else
        {
            undefined();
        }
    }
    else
    {
        undefined();
    }

    return imm64;
}


/*
    Advanced SIMD copy
*/
fl_instruction 32 dup_general (0 Q_1 001110000 imm5_5 000011 Rn_5 Rd_5)
{
    int size = lowest_bit_set_c(bits_c(imm5, 3, 0));

    int esize = 8 << size;
    int datasize = 64 << Q;

    o64 element = X(Rn);
    int elements = datasize / esize;

    o128 result = vector_zero;

    loop (elements) e
    {
        elm result e esize element;
    }

    V(Rd, result);
}

fl_instruction 32 dup_element_scalar (01011110000 imm5_5 000001 Rn_5 Rd_5)
{
    int size = lowest_bit_set_c(bits_c(imm5, 3, 0));
    int index = bits_c(imm5, 4, size + 1);
    int idxdsize = 64 << bit_c(imm5, 4);
    int esize = 8 << size;
    int datasize = esize;
    int elements = 1;

    dup_element(index, esize, elements, Rn, Rd);
}

fl_instruction 32 dup_element_vector (0 Q_1 001110000 imm5_5 000001 Rn_5 Rd_5)
{
    int size = lowest_bit_set_c(bits_c(imm5, 3, 0));
    int index = bits_c(imm5, 4, size + 1);
    int idxdsize = 64 << bit_c(imm5, 4);
    int esize = 8 << size;
    int datasize = 64 << Q;
    int elements = datasize / esize;

    dup_element(index, esize, elements, Rn, Rd);
}

fl_instruction 32 move_to_gp (0 Q_1 001110000 imm5_5 001 U_1 11 Rn_5 Rd_5)
{
    int size = lowest_bit_set_c(bits_c(imm5, 3, 0));

    int esize = 8 << size;
    int datasize = 32 << Q;
    int index = bits_c(imm5, 4, size + 1);

    o128 operand = V(Rn);

    o_type S = switch esize { case 8 : o8, case 16 : o16, case 32 : o32, case 64 : o64 };
    o_type R = switch datasize { case 32 : o32, case 64 : o64 };

    R working_operand = elm operand index esize;

    if (!U)
    {
        working_operand = extend R (S)working_operand;
    }

    X(Rd, working_operand);
}

fl_instruction 32 ins_general (01001110000 imm5_5 000111 Rn_5 Rd_5)
{
    int size = lowest_bit_set_c(bits_c(imm5, 3, 0));
    int index = bits_c(imm5, 4, size + 1);
    int esize = 8 << size;

    o64 element = X(Rn);
    o128 result = V(Rd);

    elm result index esize element;

    V(Rd, result);
}

fl_instruction 32 ins_element (01101110000 imm5_5 0 imm4_4 1 Rn_5 Rd_5)
{
    int size = lowest_bit_set_c(bits_c(imm5, 3, 0));
    int dst_index = bits_c(imm5, 4, size + 1);
    int src_index = bits_c(imm4, 3, size);
    int esize = 8 << size;

    o128 operand = V(Rn);
    o128 result = V(Rd);

    elm result dst_index esize (elm operand src_index esize);

    V(Rd, result);
}

/*
    Advanced SIMD modified immediate
*/
fl_instruction 32 movi_immediate (0 Q_1 op_1 0111100000 immhi_3 cmode_4 01 immlo_5 Rd_5)
{
    int d = Rd;

    int imm8 = (immhi << 5) | immlo;

    int cmode_helper = (cmode << 1) | op;
    int mode = 0;

    //ImmediateOp_ORR
    if (((cmode_helper & 19) == 2) || ((cmode_helper & 27) == 18))
    {
        mode = 0;
    }
    //ImmediateOp_BIC
    else if (((cmode_helper & 19) == 3) || ((cmode_helper & 27) == 19))
    {
        mode = 1;
    }
    //ImmediateOp_MVNI
    else if (((cmode_helper & 19) == 1) || ((cmode_helper & 27) == 17) || ((cmode_helper & 29) == 25))
    {
        mode = 2;
    }
    //ImmediateOp_MOVI
    else if (((cmode_helper & 19) == 0) || ((cmode_helper & 27) == 16) || ((cmode_helper & 29) == 24) || ((cmode_helper & 30) == 28) || ((cmode_helper & 31) == 30))
    {
        mode = 3;
    }
    //UNDEFINED
    else if (cmode_helper == 31)
    {
        if (Q == 0)
        {
            undefined();
        }

        mode = 3;
    }
    else
    {
        undefined();
    }

    o64 imm64 = expand_imm(op, cmode, imm8);
    o128 imm = imm64;

    if (Q)
    {
        elm imm 1 64 imm64;
    }

    o128 operand = vector_zero;
    o128 result = vector_zero;

    if (mode == 3)
    {
        result = imm;
    }
    else if (mode == 2)
    {
        loop (Q + 1) e
        {
            elm result e 64 ~(elm imm e 64);
        }
    }
    else if (mode == 0)
    {
        operand = V(Rd);

        loop (Q + 1) e
        {
            elm result e 64 ((elm operand e 64) | (elm imm e 64));
        }
    }
    else if (mode == 1)
    {
        operand = V(Rd);

        loop (Q + 1) e
        {
            elm result e 64 ((elm operand e 64) & ~(elm imm e 64));
        }
    }
    else
    {
        undefined();
    }

    V(Rd, result);
}