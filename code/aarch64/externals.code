//registers
o64 _x(int reg_id) external
void _x(int reg_id, o64 value) external
o64 _sys(int reg_id) external
void _sys(int reg_id, o64 value) external
o128 V(int reg_id) external
void V(int reg_id, o128 value) external 

//branching
void _branch_long(o64 location) external
void _branch_short(int location) external
void _branch_conditional(int yes, int no, o64 condition) external

o64 get_vector_context() external
void store_context() external
void load_context() external

int use_fast_float() external
int use_x86_sse() external
int use_x86_sse2() external

//pc
int _get_pc() external

o64 translate_address(o64 address) external

void call_supervisor(int svc) external
o64 call_counter() external

void undefined_with(int value) external
void undefined() external

o64 call(o64 a0, o64 a1, o64 a2, o64 a3, o64 a4, o64 a5, int function) external
R intrinsic_unary<R> (int instruction, R source) external
R intrinsic_binary<R> (int instruction, R source_0, R source_1) external
R intrinsic_binary_imm<R> (int instruction, R source_0, int source_1) external
R intrinsic_ternary<R> (int instruction, R source_0, R source_1, R source_2) external
R intrinsic_ternary_imm<R> (int instruction, R source_0, R source_1, int source_2) external

o64 _compare_and_swap(o64 physical_address, o64 expecting, o64 to_swap, int size)
{
    return call(physical_address, expecting, to_swap, size, 0, 0, external compare_and_swap_interpreter_cpp);
}

o64 compare_and_swap(o64 address, o64 expecting, o64 to_swap, int size)
{
    address = translate_address(address);

    return _compare_and_swap(address, expecting, to_swap, size);
}

void mem<O>(o64 address, O value)
{
    address = translate_address(address);

    physical_write address value;
}

O mem<O>(o64 address)
{
    address = translate_address(address);

    return physical_read O address; 
}

o64 XSP(int reg_id)
{
    return _x(reg_id);
}

void XSP(int reg_id, o64 value)
{
    _x(reg_id, value);
}

o64 X(int reg_id)
{
    if (reg_id == 31)
    {
        return 0;
    }
    else
    {
        return _x(reg_id);
    }
}

void X(int reg_id, o64 value)
{
    if (reg_id == 31)
    {
        return;
    }
    else
    {
        _x(reg_id, value);
    }
}