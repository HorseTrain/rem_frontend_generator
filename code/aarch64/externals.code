//registers
o64 _x(int reg_id) external
void _x(int reg_id, o64 value) external
o64 _sys(int reg_id) external
void _sys(int reg_id, o64 value) external
o128 V(int reg_id) external
void V(int reg_id, o128 value) external 

//branching
void _branch_long(o64 location) external
void _branch_short(int location) external
void _branch_conditional(int yes, int no, o64 condition) external

//pc
int _get_pc() external

o64 translate_address(o64 address) external

void call_supervisor(int svc) external
o64 call_counter() external

void undefined_with(int value) external
void undefined() external

//soft binary
o64 FPAdd(o64 operand1, o64 operand2, o64 FPCR, int N) external
o64 FPSub(o64 operand1, o64 operand2, o64 FPCR, int N) external
o64 FPMul(o64 operand1, o64 operand2, o64 FPCR, int N) external
o64 FPDiv(o64 operand1, o64 operand2, o64 FPCR, int N) external
o64 FPMax(o64 operand1, o64 operand2, o64 FPCR, int N) external
o64 FPMin(o64 operand1, o64 operand2, o64 FPCR, int N) external
o64 FPMaxNum(o64 operand1, o64 operand2, o64 FPCR, int N) external
o64 FPMinNum(o64 operand1, o64 operand2, o64 FPCR, int N) external
o64 FPCompare(o64 operand1, o64 operand2, o64 FPCR, int N) external

//Unary
o64 FPSqrt(o64 operand, o64 FPCR, int N) external
o64 FPNeg(o64 operand, o64 FPCR, int N) external
o64 FPAbs(o64 operand, o64 FPCR, int N) external

//Conversion
o64 FixedToFP(o64 source, int fracbits, int is_unsigned, int to, int from) external
o64 FPToFixed(o64 source, int fracbits, int is_unsigned, int round, int to, int from) external
o64 FPConvert(o64 source, int to, int from) external

o64 _compare_and_swap(o64 physical_address, o64 expecting, o64 to_swap, int size) external

o64 compare_and_swap(o64 address, o64 expecting, o64 to_swap, int size)
{
    address = translate_address(address);

    return _compare_and_swap(address, expecting, to_swap, size);
}

void mem<O>(o64 address, O value)
{
    address = translate_address(address);

    physical_write address value;
}

O mem<O>(o64 address)
{
    address = translate_address(address);

    return physical_read O address; 
}

o64 XSP(int reg_id)
{
    return _x(reg_id);
}

void XSP(int reg_id, o64 value)
{
    _x(reg_id, value);
}

o64 X(int reg_id)
{
    if (reg_id == 31)
    {
        return 0;
    }
    else
    {
        return _x(reg_id);
    }
}

void X(int reg_id, o64 value)
{
    if (reg_id == 31)
    {
        return;
    }
    else
    {
        _x(reg_id, value);
    }
}