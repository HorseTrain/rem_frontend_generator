/*
    BR n
    BLR n
*/
fl_instruction 32 branch_register (1101011000 l_1 11111000000 Rn_5 00000)
{
    branch_long_universal(Rn, l);
}

/*
    RET
*/
fl_instruction 32 return_register (1101011001011111000000 Rn_5 00000)
{
    branch_long_universal(Rn, false);
}

/*
    TBZ t, imm, label
    TBNZ t, imm, label
*/
fl_instruction 32 test_bit_branch(b5_1 011011 op_1 b40_5 imm14_14 Rt_5)
{
    int bit_pos = b40 + (b5 << 5);

    int new_location = _get_pc() + (sign_extend(imm14, 14) << 2);
    int next_location = _get_pc() + 4;

    o64 src = X(Rt);
    
    o8 branch_pass = ((src >> bit_pos) & 1) == op;

    _branch_conditional(new_location, next_location, branch_pass);    
}

/*
    CBZ t, label
    CBNZ t, label
*/
fl_instruction 32 compare_and_branch(sf_1 011010 op_1 imm19_19 Rt_5)
{
    o_type O = switch sf { case 0 : o32, case 1 : o64 };

    int new_location = _get_pc() + (sign_extend(imm19, 19) << 2);
    int next_location = _get_pc() + 4;

    O operand = X(Rt);
    o8 branch_pass;

    if (!op)
    {  
        branch_pass = operand == 0; 
    }
    else
    {
        branch_pass = operand != 0;
    }

    _branch_conditional(new_location, next_location, branch_pass);    
}

/*
    B label
    BL label
*/
fl_instruction 32 b_unconditional(op_1 00101 imm26_26)
{
    int new_location = _get_pc() + (sign_extend(imm26, 26) << 2);

    if (op)
    {
        int next_location = _get_pc() + 4;
        X(30, next_location);
    }
    
    _branch_short(new_location);
}

/*
    B.cond label
*/
fl_instruction 32 b_conditional(01010100 imm19_19 0 cond_4)
{
    int new_location = _get_pc() + (sign_extend(imm19, 19) << 2);
    int next_location = _get_pc() + 4;

    _branch_conditional(new_location, next_location, condition_holds(cond));
}

/*
    SVC imm
*/
fl_instruction 32 svc(11010100000 imm16_16 00001)
{
    call_supervisor(imm16);
}