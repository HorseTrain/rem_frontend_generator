o64 shift_left_check(o64 to_shift, o64 shift, int size)
{
    o64 result = 0;

    if (shift cgte size)
    {
        set result 0;
    }
    else
    {
        set result to_shift << (o64)shift;
    }

    return result;
}

o64 shift_right_check(o64 to_shift, o64 shift, int size, int is_unsigned)
{
    o64 result = 0;

    if (shift cgte size)
    {
        if ((to_shift clt 0) && !is_unsigned)
        {
            set result -1;
        }
        else
        {
            set result 0;
        }
    }
    else
    {
        if (is_unsigned)
        {
            set result to_shift >> (o64)shift;
        }
        else
        {
            set result to_shift sar (o64)shift;
        }
    }

    return result;
}

o64 reverse(o128 word, int M, int N)
{
    o128 result = vector_zero;
    int swsize = M;
    int sw = N / swsize;

    loop (sw) s
    {
        elm result ((sw - 1) - s) swsize (elm word s swsize);
    }

    return result;
}

void convert_to_int(int sf, int ftype, int Rd, int Rn, int round, int is_unsigned, int to_vector)
{
    o64 operand = V(Rn);

    int intsize = 32 << sf;
    int fltsize = get_flt_size(ftype);

    o64 result = FPToFixed(operand, 0, is_unsigned, round, intsize, fltsize);

    if (to_vector)
    {
        V(Rd, result);
    }
    else
    {
        X(Rd, result);
    }
}

int lowest_bit_set_c(int source)
{
    int size = 32;

    loop (size) i
    {
        int working_bit = (source >> i) & 1;

        if (working_bit)
        {
            return i;
        }
    }

    return size;
}

void dup_element(int index, int esize, int elements, int n, int d)
{
    o128 operand = V(n);
    o128 result = vector_zero;

    o64 element = elm operand index esize;

    loop (elements) e
    {
        elm result e esize element;
    }

    V(d, result);
}

int get_flt_size(int ftype)
{
    if (ftype == 2)
    {
        return 64;
    }
    else
    {
        return 8 << (ftype ^ 2);
    }
}

int vfp_expand_imm(int imm8, int N)
{
    int E;

    if (N == 16)
    {
        E = 5;
    }
    else if (N == 32)
    {
        E = 8;
    }
    else
    {
        E = 11;
    }

    int F = (N - E) - 1;
    int sign = (imm8 >> 7) & 1;

    int exp = ~(bit_c(imm8, 6)) & 1;
    exp = (exp << (E - 3)) | replicate_c(bit_c(imm8, 6), 1, E - 3);
    exp = (exp << 2) | bits_c(imm8, 5, 4);

    int frac = bits_c(imm8, 3, 0) << (F - 4);

    int result = sign;

    result = (result << (1 + (E - 3) + 2)) | exp;
    result = (result << (4 + (F - 4))) | frac;

    return result;
}

int expand_imm(int op, int cmode, int imm8)
{
    int imm64 = 0;
    int cmode_test = bits_c(cmode, 3, 1);

    if (cmode_test == 0)
    {
        imm64 = replicate_c(imm8, 32, 2);
    }
    else if (cmode_test == 1)
    {
        imm64 = replicate_c(imm8 << 8, 32, 2);
    }
    else if (cmode_test == 2)
    {
        imm64 = replicate_c(imm8 << 16, 32, 2);
    }
    else if (cmode_test == 3)
    {
        imm64 = replicate_c(imm8 << 24, 32, 2);
    }
    else if (cmode_test == 4)
    {
        imm64 = replicate_c(imm8, 16, 4);
    }
    else if (cmode_test == 5)
    {
        imm64 = replicate_c(imm8 << 8, 16, 4);
    }
    else if (cmode_test == 6)
    {
        if ((cmode & 1) == 0)
        {
            imm64 = replicate_c((imm8 << 8) | ones(8), 32, 2);
        }
        else
        {
            imm64 = replicate_c((imm8 << 16) | ones(16), 32, 2);
        }
    }
    else if (cmode_test == 7)
    {
        if (bit_c(cmode, 0) == 0 && op == 0)
        {
            imm64 = replicate_c(imm8, 8, 8);
        }
        else if (bit_c(cmode, 0) == 0 && op == 1)
        {
            loop (8) i
            {
                int part = (0 - ((imm8 >> i) & 1)) & UINT8_MAX;

                imm64 = imm64 | (part << (i * 8));
            }
        }
        else if (bit_c(cmode, 0) == 1 && op == 0)
        {
            int p0 = bit_c(imm8, 7);                    //1
            int p1 = (~(bit_c(imm8, 6))) & 1;           //1
            int p2 = replicate_c(bit_c(imm8, 6),1,5);   //5
            int p3 = bits_c(imm8, 5, 0);                //6
            int p4 = 0;                                 //19
            
            int working = p4 | (p3 << 19) | (p2 << (19 + 6)) | (p1 << (19 + 6 + 5)) | (p0 << (19 + 6 + 5 + 1));

            imm64 = replicate_c(working, 32, 2);
        }
        else if (bit_c(cmode, 0) == 1 && op == 1)
        {
            int p0 = bit_c(imm8, 7);                    //1
            int p1 = (~(bit_c(imm8, 6))) & 1;           //1
            int p2 = replicate_c(bit_c(imm8, 6),1,8);   //8
            int p3 = bits_c(imm8, 5, 0);                //6
            int p4 = 0;                                 //48

            imm64 = p4 | (p3 << 48) | (p2 << (48 + 6)) | (p1 << (48 + 6 + 8)) | (p0 << (48 + 6 + 8 + 1));
        }
        else
        {
            undefined();
        }
    }
    else
    {
        undefined();
    }

    return imm64;
}

void VPart(int n, int part, int width, o64 value)
{
    if (part == 0)
    {
        V(n, value);
    }
    else
    {
        o128 src = V(n);
        
        elm src 1 64 value;
        
        V(n, src);
    }
}

o64 VPart(int n, int part, int width)
{
    return elm V(n) part width;
}

o64 get_from_concacted_vector(o128 top, o128 bottom, int index, int element_count, int element_size)
{
    o128 working = bottom;

    if (index >= element_count)
    {
        index = index - element_count;

        working = top;
    }

    return elm working index element_size;
}

o64 call_float_binary(o64 operand1, o64 operand2, o64 fpcr, int N, int function)
{
    return call(operand1, operand2, fpcr, N, 0, 0, function);
}

o64 call_float_unary(o64 operand, o64 fpcr, int N, int function)
{
    return call(operand, fpcr, N, 0, 0, 0, function);
}

void convert_to_float(int sf, int ftype,int U, int Rn, int Rd, int from_vector)
{
    int intsize = 32 << sf;
    int fltsize = get_flt_size(ftype);

    o_type I = switch intsize { case 32 : o32, case 64 : o64 };
    o_type F = switch fltsize { case 16 : o16, case 32 : o32, case 64 : o64 };

    F result;
    I operand;

    if (from_vector)
    {
        operand = V(Rn);
    }
    else
    {
        operand = X(Rn);
    }

    if (U)
    {
        result = to_float F operand;
    }
    else
    {
        result = to_float signed F operand;
    }

    V(Rd, result);
}

o128 replicate_vector(o128 source, int v_size, int count)
{
    o128 result = vector_zero;

    loop (count) e
    {
        elm result e v_size (elm source 0 64);
    }

    return result;
}

void st(int wback, int Q, int L, int opcode, int size, int Rm, int Rn, int Rt)
{
    int datasize = 64 << Q;
    int esize = 8 << size;
    int elements = datasize / esize;

    int ebytes = esize / 8;

    int rpt = 1;
    int selem = 2;

    o64 address = XSP(Rn);

    int offs = 0;
    int t = Rt;
    int m = Rm;

    o_type O = switch (ebytes * 8) { case 8 : o8, case 16 : o16, case 32 : o32, case 64 : o64, case 128 : o128 };

    loop (rpt) r
    {
        loop (elements) e
        {
            int tt = (t + r) % 32;

            loop (selem) s
            {
                o128 rval = V(tt);
                o64 eaddr = address + offs;
                mem<O>(eaddr, elm rval e esize);
                offs = offs + ebytes;
                tt = (tt + 1) % 32;
            }
        }
    }

    if (wback)
    {
        o64 _offs = offs;

        if (Rm != 31)
        {
            _offs = X(Rm);
        }

        address = address + _offs;
        
        XSP(Rn, address);
    }
}

void memory_1(int wback,int Q, int L, int R, int Rm, int o2, int opcode, int S, int size, int Rn, int Rt, int is_load)
{
    int scale = bits_c(opcode, 2, 1);
    int selem = ((bit_c(opcode, 0) << 1) | R) + 1;
    int replicate = false;
    int index;

    if (scale == 3)
    {
        scale = size;
        replicate = true;
    }
    else if (scale == 0)
    {
        index = Q;

        index = (index << 1) | S;
        index = (index << 2) | size;
    }
    else if (scale == 1)
    {
        index = Q;

        index = (index << 1) | S;
        index = (index << 1) | bit_c(size, 1);
    }
    else if (scale == 2)
    {
        if ((size & 1) == 0)
        {
            index = (Q << 1) | S;
        }
        else
        {
            index = Q;
            scale = 3;
        }
    }

    int datasize = 64 << Q;
    int esize = 8 << scale;

    int ebytes = esize / 8;

    o64 address = XSP(Rn);

    int offs = 0;

    o_type O = switch (ebytes * 8) { case 8 : o8, case 16 : o16, case 32 : o32, case 64 : o64, case 128 : o128 };

    int t = Rt;

    if (replicate)
    {
        loop (selem) s
        {
            o64 eaddr = address + offs;

            O element = mem<O>(eaddr);

            V(t, replicate_vector(element, esize, datasize / esize));

            offs = offs + ebytes;
            t = ( t + 1 ) % 32;
        }
    }
    else
    {
        if (is_load)
        {
            loop (selem) s
            {
                o128 rval = V(t);

                o64 eaddr = address + offs;

                elm rval index esize mem<O>(eaddr);

                V(t, rval);

                offs = offs + ebytes;
                t = ( t + 1 ) % 32;
            }
        }
        else
        {
            loop (selem) s
            {
                o128 rval = V(t);

                o64 eaddr = address + offs;

                mem<O>(eaddr, elm rval index esize);

                offs = offs + ebytes;
                t = ( t + 1 ) % 32;
            }
        }
    }

    if (wback)
    {
        o64 _offs = offs;

        if (Rm != 31)
        {
            _offs = X(Rm);
        }

        address = address + _offs;
        
        XSP(Rn, address);
    }
}

void fcm_vector(int Rd, int Rn, int Rm, int mode, int Q, int sz)
{
    o128 n = V(Rn);
    o128 m;

    o128 result = vector_zero;

    if (Rm == -1)
    {
        m = vector_zero;
    }
    else
    {
        m = V(Rm);
    }

    int esize = 32 << sz;
    int datasize = 64 << Q;
    int elements = datasize / esize;

    o64 fpcr_state = _sys(external fpcr);

    loop (elements) e
    {
        o64 element1 = elm n e esize;
        o64 element2 = elm m e esize;
        o64 element_result;

        if (mode == 0)
        {
            element_result = 0 - FPCompareEQ(element1, element2, fpcr_state, esize);
        }
        else if (mode == 1)
        {
            element_result = 0 - FPCompareGT(element1, element2, fpcr_state, esize);
        }
        else if (mode == 2)
        {
            element_result = 0 - FPCompareGE(element1, element2, fpcr_state, esize);
        }

        elm result e esize element_result;
    }

    V(Rd, result);
}

o64 bits_r(o64 operand, int top, int bottom)
{
    top = top + 1;
    int size = top - bottom;
    int mask = (1 << size) - 1;

    return (operand >> bottom) & mask;
}

o64 infinity(int sign,int N)
{
    o64 result = sign << (N - 1);

    if (N == 32)
    {
        result = result | (0b11111111 << 23);
    }
    else if (N == 64)
    {
        result = result | (0b11111111111 << 52);
    }
    else
    {
        undefined();
    }

    return result;
}

o64 float_is_nan(o64 operand, int N)
{
    o8 result = 0;

    o64 exp;
    o64 frac;

    if (N == 32)
    {
        exp = bits_r(operand, 30, 23);
        frac = bits_r(operand, 22, 0);

        if (exp == 0b11111111 && frac != 0)
        {
            set result 1;
        }
    }
    else if (N == 64)
    {
        exp = bits_r(operand, 62, 52);
        frac = bits_r(operand ,51, 0);

        if (exp == 0b11111111111 && frac != 0)
        {
            set result 1;
        }
    }
    else
    {
        undefined();
    }

    return result;
}

o64 float_imm(o64 source, int N)
{
    if (N == 32)
    {
        return to_float o32 source;
    }
    else if (N == 64)
    {
        return to_float o64 source;
    }
    else
    {
        undefined();
    }
}

F create_fixed_from_fbits<F>(int fbits, int N)
{
    int working;

    if (fbits == 64)
    {
        return ((F)float_imm(1 << 63, N)) fmul ((F)float_imm(2, N));
    }
    else if (fbits > 64)
    {
        undefined();
    }

    return float_imm(1 << fbits, N);
}

//soft binary
o64 FPAdd(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        return o1 fadd o2;
    }
    
    return call_float_binary(operand1, operand2, FPCR, N, external FPAdd_I); 
}

o64 FPSub(o64 operand1, o64 operand2, o64 FPCR, int N)
{   
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        return o1 fsub o2;
    }
    
    return call_float_binary(operand1, operand2, FPCR, N, external FPSub_I); 
}

o64 FPMul(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        return o1 fmul o2;
    }

    return call_float_binary(operand1, operand2, FPCR, N, external FPMul_I); 
}

o64 FPDiv(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        return o1 fdiv o2;
    }

    return call_float_binary(operand1, operand2, FPCR, N, external FPDiv_I); 
}

o64 FPMax(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        return o1 fmax o2;
    }

    return call_float_binary(operand1, operand2, FPCR, N, external FPMax_I); 
}

o64 FPMin(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        return o1 fmin o2;
    }

    return call_float_binary(operand1, operand2, FPCR, N, external FPMin_I); 
}

o64 FPMaxNum(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o64 type_1_nan = float_is_nan(operand1, N);
        o64 type_2_nan = float_is_nan(operand2, N);

        if (type_1_nan && !type_2_nan)
        {
            set operand1 infinity(1, N);
        }
        else if (!type_1_nan && type_2_nan)
        {
            set operand2 infinity(1, N);
        }

        o_type F = switch N {case 32 : o32, case 64 : o64 };

        return ((F)operand1) fmax ((F)operand2);
    }

    return call_float_binary(operand1, operand2, FPCR, N, external FPMaxNum_I); 
}

o64 FPMinNum(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o64 type_1_nan = float_is_nan(operand1, N);
        o64 type_2_nan = float_is_nan(operand2, N);

        if (type_1_nan && !type_2_nan)
        {
            set operand1 infinity(0, N);
        }
        else if (!type_1_nan && type_2_nan)
        {
            set operand2 infinity(0, N);
        }

        o_type F = switch N {case 32 : o32, case 64 : o64 };

        return ((F)operand1) fmin ((F)operand2);
    }

    return call_float_binary(operand1, operand2, FPCR, N, external FPMinNum_I); 
}

o64 FPCompare(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        F result = 0;

        o64 type_1_nan = float_is_nan(o1, N);
        o64 type_2_nan = float_is_nan(o2, N);

        if (type_1_nan | type_2_nan)
        {
            set result 0b0011;
        }
        else
        {
            if (o1 feq o2)
            {
                set result 0b0110;
            }
            else if (o1 fclt o2)
            {
                set result 0b1000;
            }
            else
            {
                set result 0b0010;
            }
        }

        return result;
    }

    return call_float_binary(operand1, operand2, FPCR, N, external FPCompare_I); 
}

o64 FPRSqrtStepFused(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1 ^ (1 << (N -1));
        F o2 = operand2;

        F three = float_imm(3, N);
        F two = float_imm(2, N);

        return (three fadd (o1 fmul o2)) fdiv two;
    }

    return call_float_binary(operand1, operand2, FPCR, N, external FPRSqrtStepFused_I); 
}

o64 FPRecipStepFused(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1 ^ (1 << (N -1));
        F o2 = operand2;

        F two = float_imm(2, N);

        return (two fadd (o1 fmul o2));
    }

    return call_float_binary(operand1, operand2, FPCR, N, external FPRecipStepFused_I); 
}

o64 FPCompareEQ(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        return o1 feq o2;
    }

    return call_float_binary(operand1, operand2, FPCR, N, external  FPCompareEQ_I); 
}

o64 FPCompareGT(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        return o1 fcgt o2;
    }

    return call_float_binary(operand1, operand2, FPCR, N, external  FPCompareGT_I); 
}

o64 FPCompareGE(o64 operand1, o64 operand2, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o1 = operand1;
        F o2 = operand2;

        return o1 fcgte o2;
    }

    return call_float_binary(operand1, operand2, FPCR, N, external  FPCompareGE_I); 
}

//Unary
o64 FPSqrt(o64 operand, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        return fsqrt (F)operand; 
    }

    return call_float_unary(operand, FPCR, N, external FPSqrt_I); 
}

o64 FPNeg(o64 operand, o64 FPCR, int N)
{
    if (use_fast_float())
    {
        return operand ^ (1 << (N - 1));
    }

    return call_float_unary(operand, FPCR, N, external FPNeg_I); 
}

o64 FPAbs(o64 operand, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o64 mask = (1 << (N - 1)) - 1;

        return operand & mask;
    }

    return call_float_unary(operand, FPCR, N, external FPAbs_I); 
}

o64 FPRSqrtEstimate(o64 operand, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F one = float_imm(1, N);

        return one fdiv (fsqrt (F)operand);
    }

    return call_float_unary(operand, FPCR, N, external FPRSqrtEstimate_I); 
}

o64 FPRecipEstimate(o64 operand, o64 FPCR, int N)
{
    if (use_fast_float() && N != 16)
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F one = float_imm(1, N);

        return one fdiv (F)operand;
    }

    return call_float_unary(operand, FPCR, N, external FPRecipEstimate_I); 
}

//Conversion
o64 FixedToFP(o64 source, int fracbits, int is_unsigned, int to, int from)
{
    if (use_fast_float() && to != 16 && from != 16)
    {
        o_type F = switch to {case 32 : o32, case 64 : o64 };
        o_type I = switch from {case 32 : o32, case 64 : o64 };

        if (from == 32)
        {
            source = source & UINT32_MAX;
        }

        F power = create_fixed_from_fbits<F>(fracbits, to);
        
        F working_result;

        if (is_unsigned)
        {
            working_result = to_float F (I)source;
        }
        else
        {
            working_result = to_float signed F (I)source;
        }

        return working_result fdiv power;
    }

    return call(source, fracbits, is_unsigned, to, from, 0, external FixedToFP_I);
}

o64 FPToFixed(o64 source, int fracbits, int is_unsigned, int round, int to, int from) 
{
    if (use_fast_float() && to != 16 && from != 16)
    {
        o_type F = switch to {case 32 : o32, case 64 : o64 };
        o_type I = switch from {case 32 : o32, case 64 : o64 };

        //TODO
    }

    return call(source, fracbits, is_unsigned, round, to, from, external FPToFixed_I);
}

o64 FPConvert(o64 source, int to, int from)
{
    if (use_fast_float() && to != 16 && from != 16)
    {
        //TODO
    }

    return call(source, 0, 0, to, from, 0, external FPConvert_I);
}

o64 FPRoundInt(o64 source, o64 fpcr, int rounding, int N)
{
    if (use_fast_float() && N != 16)
    {
        //TODO
    }

    return call(source, fpcr, rounding, N, 0, 0, external FPRoundInt_I);
}

//Accumilate
o64 FPMulAdd(o64 addend, o64 element1, o64 element2, o64 fpcr, int N)
{
    if (use_fast_float())
    {
        o_type F = switch N {case 32 : o32, case 64 : o64 };

        F o3 = addend;
        F o1 = element1;
        F o2 = element2;

        return o3 fadd (o1 fmul o2);
    }

    return call(addend, element1, element2, fpcr, N, 0, external FPMulAdd_I);
}