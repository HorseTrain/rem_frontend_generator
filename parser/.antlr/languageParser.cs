//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/linvirt/code/rem_frontend_generator/parser/language.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class languageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, DECIMAL=84, BINARY=85, HEX=86, IDENTIFIER=87, 
		WHITE_SPACE=88, LINE_COMMENT=89, BLOB_COMMENT=90;
	public const int
		RULE_sourceFile = 0, RULE_topLevelDeclarations = 1, RULE_elementInsert = 2, 
		RULE_elementExtract = 3, RULE_line = 4, RULE_hostMemoryRead = 5, RULE_hostMemoryWrite = 6, 
		RULE_semiColin = 7, RULE_functionCallLine = 8, RULE_caseStatement = 9, 
		RULE_loopStatement = 10, RULE_switchStatement = 11, RULE_returnStatement = 12, 
		RULE_lValueSet = 13, RULE_runtimeSet = 14, RULE_ifStatement = 15, RULE_elseStatement = 16, 
		RULE_scope = 17, RULE_identifierExpression = 18, RULE_externalIdentifierExpression = 19, 
		RULE_baseExpression = 20, RULE_constants = 21, RULE_cast = 22, RULE_unaryExpression = 23, 
		RULE_signedSign = 24, RULE_floatConversions = 25, RULE_signExtend = 26, 
		RULE_parenthesis = 27, RULE_genericImpl = 28, RULE_functionCall = 29, 
		RULE_vectorZero = 30, RULE_expression = 31, RULE_encodingExtra = 32, RULE_fixedLengthInstructionOperand = 33, 
		RULE_fixedLengthInstructionOperands = 34, RULE_fixedLengthInstruction = 35, 
		RULE_instructionDeclaration = 36, RULE_functionParameter = 37, RULE_functionParameters = 38, 
		RULE_functionBody = 39, RULE_variableType = 40, RULE_functionDeclaration = 41, 
		RULE_identifier = 42, RULE_trueFalse = 43, RULE_number = 44, RULE_runtimeOperandType = 45, 
		RULE_compileTimeIntegerType = 46, RULE_runtimeTypeCase = 47, RULE_runtimeTypeSwitch = 48, 
		RULE_runtimeTypeReference = 49, RULE_operandTypeDeclaration = 50, RULE_undefinedVariableDeclaration = 51, 
		RULE_definedVariableDeclaration = 52, RULE_variableDeclaration = 53;
	public static readonly string[] ruleNames = {
		"sourceFile", "topLevelDeclarations", "elementInsert", "elementExtract", 
		"line", "hostMemoryRead", "hostMemoryWrite", "semiColin", "functionCallLine", 
		"caseStatement", "loopStatement", "switchStatement", "returnStatement", 
		"lValueSet", "runtimeSet", "ifStatement", "elseStatement", "scope", "identifierExpression", 
		"externalIdentifierExpression", "baseExpression", "constants", "cast", 
		"unaryExpression", "signedSign", "floatConversions", "signExtend", "parenthesis", 
		"genericImpl", "functionCall", "vectorZero", "expression", "encodingExtra", 
		"fixedLengthInstructionOperand", "fixedLengthInstructionOperands", "fixedLengthInstruction", 
		"instructionDeclaration", "functionParameter", "functionParameters", "functionBody", 
		"variableType", "functionDeclaration", "identifier", "trueFalse", "number", 
		"runtimeOperandType", "compileTimeIntegerType", "runtimeTypeCase", "runtimeTypeSwitch", 
		"runtimeTypeReference", "operandTypeDeclaration", "undefinedVariableDeclaration", 
		"definedVariableDeclaration", "variableDeclaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'elm'", "'physical_read'", "'physical_write'", "';'", "'case'", 
		"':'", "'loop'", "'switch'", "'{'", "'}'", "'return'", "'='", "'set'", 
		"'if'", "'else'", "'external'", "'UINT8_MIN'", "'INT8_MIN'", "'UINT16_MIN'", 
		"'INT16_MIN'", "'UINT32_MIN'", "'INT32_MIN'", "'UINT64_MIN'", "'INT64_MIN'", 
		"'UINT8_MAX'", "'INT8_MAX'", "'UINT16_MAX'", "'INT16_MAX'", "'UINT32_MAX'", 
		"'INT32_MAX'", "'UINT64_MAX'", "'INT64_MAX'", "'('", "')'", "'-'", "'~'", 
		"'!'", "'signed'", "'to_float'", "'to_int'", "'extend'", "'<'", "','", 
		"'>'", "'vector_zero'", "'*'", "'/'", "'sdiv'", "'umulh'", "'smulh'", 
		"'%'", "'+'", "'<<'", "'>>'", "'sar'", "'ror'", "'clt'", "'cgt'", "'clte'", 
		"'cgte'", "'<='", "'>='", "'=='", "'!='", "'&'", "'^'", "'|'", "'&&'", 
		"'||'", "'?'", "'fl_instruction'", "'true'", "'false'", "'o8'", "'o16'", 
		"'o32'", "'o64'", "'o128'", "'i64'", "'integer'", "'int'", "'void'", "'o_type'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"DECIMAL", "BINARY", "HEX", "IDENTIFIER", "WHITE_SPACE", "LINE_COMMENT", 
		"BLOB_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static languageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public languageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public languageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(languageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext[] topLevelDeclarations() {
			return GetRuleContexts<TopLevelDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext topLevelDeclarations(int i) {
			return GetRuleContext<TopLevelDeclarationsContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 69625L) != 0)) {
				{
				{
				State = 108;
				topLevelDeclarations();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionDeclarationContext instructionDeclaration() {
			return GetRuleContext<InstructionDeclarationContext>(0);
		}
		public TopLevelDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclarations; } }
	}

	[RuleVersion(0)]
	public TopLevelDeclarationsContext topLevelDeclarations() {
		TopLevelDeclarationsContext _localctx = new TopLevelDeclarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelDeclarations);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case T__79:
			case T__80:
			case T__81:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116;
				functionDeclaration();
				}
				break;
			case T__70:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				instructionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementInsertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ElementInsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementInsert; } }
	}

	[RuleVersion(0)]
	public ElementInsertContext elementInsert() {
		ElementInsertContext _localctx = new ElementInsertContext(Context, State);
		EnterRule(_localctx, 4, RULE_elementInsert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__0);
			State = 121;
			expression(0);
			State = 122;
			expression(0);
			State = 123;
			expression(0);
			State = 124;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementExtractContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ElementExtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementExtract; } }
	}

	[RuleVersion(0)]
	public ElementExtractContext elementExtract() {
		ElementExtractContext _localctx = new ElementExtractContext(Context, State);
		EnterRule(_localctx, 6, RULE_elementExtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(T__0);
			State = 127;
			expression(0);
			State = 128;
			expression(0);
			State = 129;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandTypeDeclarationContext operandTypeDeclaration() {
			return GetRuleContext<OperandTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueSetContext lValueSet() {
			return GetRuleContext<LValueSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeSetContext runtimeSet() {
			return GetRuleContext<RuntimeSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallLineContext functionCallLine() {
			return GetRuleContext<FunctionCallLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostMemoryWriteContext hostMemoryWrite() {
			return GetRuleContext<HostMemoryWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiColinContext semiColin() {
			return GetRuleContext<SemiColinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementInsertContext elementInsert() {
			return GetRuleContext<ElementInsertContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 8, RULE_line);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				scope();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				operandTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134;
				returnStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135;
				lValueSet();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 136;
				runtimeSet();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 137;
				ifStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 138;
				functionCallLine();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 139;
				switchStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 140;
				loopStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 141;
				hostMemoryWrite();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 142;
				semiColin();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 143;
				elementInsert();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostMemoryReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HostMemoryReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostMemoryRead; } }
	}

	[RuleVersion(0)]
	public HostMemoryReadContext hostMemoryRead() {
		HostMemoryReadContext _localctx = new HostMemoryReadContext(Context, State);
		EnterRule(_localctx, 10, RULE_hostMemoryRead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__1);
			State = 147;
			variableType();
			State = 148;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostMemoryWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HostMemoryWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostMemoryWrite; } }
	}

	[RuleVersion(0)]
	public HostMemoryWriteContext hostMemoryWrite() {
		HostMemoryWriteContext _localctx = new HostMemoryWriteContext(Context, State);
		EnterRule(_localctx, 12, RULE_hostMemoryWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__2);
			State = 151;
			expression(0);
			State = 152;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiColinContext : ParserRuleContext {
		public SemiColinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semiColin; } }
	}

	[RuleVersion(0)]
	public SemiColinContext semiColin() {
		SemiColinContext _localctx = new SemiColinContext(Context, State);
		EnterRule(_localctx, 14, RULE_semiColin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallLine; } }
	}

	[RuleVersion(0)]
	public FunctionCallLineContext functionCallLine() {
		FunctionCallLineContext _localctx = new FunctionCallLineContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCallLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(T__4);
			State = 159;
			expression(0);
			State = 160;
			Match(T__5);
			State = 161;
			line();
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 162;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(T__6);
			State = 166;
			expression(0);
			State = 167;
			identifier();
			State = 168;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(T__7);
			State = 171;
			expression(0);
			State = 172;
			Match(T__8);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 173;
				caseStatement();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__10);
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 182;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LValueSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueSet; } }
	}

	[RuleVersion(0)]
	public LValueSetContext lValueSet() {
		LValueSetContext _localctx = new LValueSetContext(Context, State);
		EnterRule(_localctx, 26, RULE_lValueSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			identifier();
			State = 186;
			Match(T__11);
			State = 187;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RuntimeSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeSet; } }
	}

	[RuleVersion(0)]
	public RuntimeSetContext runtimeSet() {
		RuntimeSetContext _localctx = new RuntimeSetContext(Context, State);
		EnterRule(_localctx, 28, RULE_runtimeSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__12);
			State = 190;
			identifier();
			State = 191;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(T__13);
			State = 194;
			parenthesis();
			State = 195;
			line();
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 196;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(T__14);
			State = 200;
			line();
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 201;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 34, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(T__8);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27546L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 9215L) != 0)) {
				{
				{
				State = 205;
				line();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 211;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierExpression; } }
	}

	[RuleVersion(0)]
	public IdentifierExpressionContext identifierExpression() {
		IdentifierExpressionContext _localctx = new IdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifierExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalIdentifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierExpressionContext identifierExpression() {
			return GetRuleContext<IdentifierExpressionContext>(0);
		}
		public ExternalIdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalIdentifierExpression; } }
	}

	[RuleVersion(0)]
	public ExternalIdentifierExpressionContext externalIdentifierExpression() {
		ExternalIdentifierExpressionContext _localctx = new ExternalIdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_externalIdentifierExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(T__15);
			State = 216;
			identifierExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierExpressionContext identifierExpression() {
			return GetRuleContext<IdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalIdentifierExpressionContext externalIdentifierExpression() {
			return GetRuleContext<ExternalIdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueFalseContext trueFalse() {
			return GetRuleContext<TrueFalseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		public BaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseExpression; } }
	}

	[RuleVersion(0)]
	public BaseExpressionContext baseExpression() {
		BaseExpressionContext _localctx = new BaseExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_baseExpression);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				identifierExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				externalIdentifierExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220;
				parenthesis();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 221;
				number();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 222;
				trueFalse();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 223;
				cast();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 224;
				constants();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 42, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8589803520L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 44, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(T__32);
			State = 230;
			variableType();
			State = 231;
			Match(T__33);
			State = 232;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 235;
			baseExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedSignContext : ParserRuleContext {
		public SignedSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedSign; } }
	}

	[RuleVersion(0)]
	public SignedSignContext signedSign() {
		SignedSignContext _localctx = new SignedSignContext(Context, State);
		EnterRule(_localctx, 48, RULE_signedSign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatConversionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedSignContext signedSign() {
			return GetRuleContext<SignedSignContext>(0);
		}
		public FloatConversionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatConversions; } }
	}

	[RuleVersion(0)]
	public FloatConversionsContext floatConversions() {
		FloatConversionsContext _localctx = new FloatConversionsContext(Context, State);
		EnterRule(_localctx, 50, RULE_floatConversions);
		int _la;
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				Match(T__38);
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 240;
					signedSign();
					}
				}

				State = 243;
				variableType();
				State = 244;
				expression(0);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246;
				Match(T__39);
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 247;
					signedSign();
					}
				}

				State = 250;
				variableType();
				State = 251;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignExtendContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignExtendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signExtend; } }
	}

	[RuleVersion(0)]
	public SignExtendContext signExtend() {
		SignExtendContext _localctx = new SignExtendContext(Context, State);
		EnterRule(_localctx, 52, RULE_signExtend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(T__40);
			State = 256;
			variableType();
			State = 257;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis; } }
	}

	[RuleVersion(0)]
	public ParenthesisContext parenthesis() {
		ParenthesisContext _localctx = new ParenthesisContext(Context, State);
		EnterRule(_localctx, 54, RULE_parenthesis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(T__32);
			State = 260;
			expression(0);
			State = 261;
			Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public GenericImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericImpl; } }
	}

	[RuleVersion(0)]
	public GenericImplContext genericImpl() {
		GenericImplContext _localctx = new GenericImplContext(Context, State);
		EnterRule(_localctx, 56, RULE_genericImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(T__41);
			State = 264;
			identifier();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__42) {
				{
				{
				State = 265;
				Match(T__42);
				State = 266;
				identifier();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 272;
			Match(T__43);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			identifier();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__41) {
				{
				State = 275;
				genericImpl();
				}
			}

			State = 278;
			Match(T__32);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 39290360758278L) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 61443L) != 0)) {
				{
				State = 279;
				expression(0);
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__42) {
					{
					{
					State = 280;
					Match(T__42);
					State = 281;
					expression(0);
					}
					}
					State = 286;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 289;
			Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorZeroContext : ParserRuleContext {
		public VectorZeroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorZero; } }
	}

	[RuleVersion(0)]
	public VectorZeroContext vectorZero() {
		VectorZeroContext _localctx = new VectorZeroContext(Context, State);
		EnterRule(_localctx, 60, RULE_vectorZero);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostMemoryReadContext hostMemoryRead() {
			return GetRuleContext<HostMemoryReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatConversionsContext floatConversions() {
			return GetRuleContext<FloatConversionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignExtendContext signExtend() {
			return GetRuleContext<SignExtendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementExtractContext elementExtract() {
			return GetRuleContext<ElementExtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VectorZeroContext vectorZero() {
			return GetRuleContext<VectorZeroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 294;
				functionCall();
				}
				break;
			case 2:
				{
				State = 295;
				hostMemoryRead();
				}
				break;
			case 3:
				{
				State = 296;
				baseExpression();
				}
				break;
			case 4:
				{
				State = 297;
				unaryExpression();
				}
				break;
			case 5:
				{
				State = 298;
				floatConversions();
				}
				break;
			case 6:
				{
				State = 299;
				signExtend();
				}
				break;
			case 7:
				{
				State = 300;
				elementExtract();
				}
				break;
			case 8:
				{
				State = 301;
				vectorZero();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 340;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 304;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 305;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433230883192832L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 306;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 307;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 308;
						_la = TokenStream.LA(1);
						if ( !(_la==T__34 || _la==T__51) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 309;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 310;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 311;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 135107988821114880L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 312;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 313;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 314;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9079278839011475456L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 315;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 316;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 317;
						_la = TokenStream.LA(1);
						if ( !(_la==T__62 || _la==T__63) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 318;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 319;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 320;
						Match(T__64);
						State = 321;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 322;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 323;
						Match(T__65);
						State = 324;
						expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 325;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 326;
						Match(T__66);
						State = 327;
						expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 328;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 329;
						Match(T__67);
						State = 330;
						expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 331;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 332;
						Match(T__68);
						State = 333;
						expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 334;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 335;
						Match(T__69);
						State = 336;
						expression(0);
						State = 337;
						Match(T__5);
						State = 338;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EncodingExtraContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public EncodingExtraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingExtra; } }
	}

	[RuleVersion(0)]
	public EncodingExtraContext encodingExtra() {
		EncodingExtraContext _localctx = new EncodingExtraContext(Context, State);
		EnterRule(_localctx, 64, RULE_encodingExtra);
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__63:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345;
				Match(T__63);
				State = 346;
				number();
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347;
				Match(T__62);
				State = 348;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncodingExtraContext encodingExtra() {
			return GetRuleContext<EncodingExtraContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public FixedLengthInstructionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperand; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandContext fixedLengthInstructionOperand() {
		FixedLengthInstructionOperandContext _localctx = new FixedLengthInstructionOperandContext(Context, State);
		EnterRule(_localctx, 66, RULE_fixedLengthInstructionOperand);
		int _la;
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 351;
				identifier();
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__62 || _la==T__63) {
					{
					State = 352;
					encodingExtra();
					}
				}

				}
				break;
			case DECIMAL:
			case BINARY:
			case HEX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext[] fixedLengthInstructionOperand() {
			return GetRuleContexts<FixedLengthInstructionOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext fixedLengthInstructionOperand(int i) {
			return GetRuleContext<FixedLengthInstructionOperandContext>(i);
		}
		public FixedLengthInstructionOperandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperands; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
		FixedLengthInstructionOperandsContext _localctx = new FixedLengthInstructionOperandsContext(Context, State);
		EnterRule(_localctx, 68, RULE_fixedLengthInstructionOperands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(T__32);
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 15L) != 0)) {
				{
				{
				State = 359;
				fixedLengthInstructionOperand();
				}
				}
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 365;
			Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
			return GetRuleContext<FixedLengthInstructionOperandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FixedLengthInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstruction; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionContext fixedLengthInstruction() {
		FixedLengthInstructionContext _localctx = new FixedLengthInstructionContext(Context, State);
		EnterRule(_localctx, 70, RULE_fixedLengthInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(T__70);
			State = 368;
			number();
			State = 369;
			identifier();
			State = 370;
			fixedLengthInstructionOperands();
			State = 371;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionContext fixedLengthInstruction() {
			return GetRuleContext<FixedLengthInstructionContext>(0);
		}
		public InstructionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionDeclaration; } }
	}

	[RuleVersion(0)]
	public InstructionDeclarationContext instructionDeclaration() {
		InstructionDeclarationContext _localctx = new InstructionDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_instructionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			fixedLengthInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 74, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			variableType();
			State = 376;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 76, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			functionParameter();
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__42) {
				{
				{
				State = 379;
				Match(T__42);
				State = 380;
				functionParameter();
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 78, RULE_functionBody);
		try {
			State = 388;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386;
				scope();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				Match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompileTimeIntegerTypeContext compileTimeIntegerType() {
			return GetRuleContext<CompileTimeIntegerTypeContext>(0);
		}
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_variableType);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				runtimeOperandType();
				}
				break;
			case T__78:
			case T__79:
			case T__80:
			case T__81:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391;
				compileTimeIntegerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			variableType();
			State = 395;
			identifier();
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__41) {
				{
				State = 396;
				genericImpl();
				}
			}

			State = 399;
			Match(T__32);
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 8703L) != 0)) {
				{
				State = 400;
				functionParameters();
				}
			}

			State = 403;
			Match(T__33);
			State = 404;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(languageParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 84, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueFalseContext : ParserRuleContext {
		public TrueFalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueFalse; } }
	}

	[RuleVersion(0)]
	public TrueFalseContext trueFalse() {
		TrueFalseContext _localctx = new TrueFalseContext(Context, State);
		EnterRule(_localctx, 86, RULE_trueFalse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_la = TokenStream.LA(1);
			if ( !(_la==T__71 || _la==T__72) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(languageParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(languageParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(languageParser.HEX, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 88, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeOperandTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RuntimeOperandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeOperandType; } }
	}

	[RuleVersion(0)]
	public RuntimeOperandTypeContext runtimeOperandType() {
		RuntimeOperandTypeContext _localctx = new RuntimeOperandTypeContext(Context, State);
		EnterRule(_localctx, 90, RULE_runtimeOperandType);
		try {
			State = 418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__73:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412;
				Match(T__73);
				}
				break;
			case T__74:
				EnterOuterAlt(_localctx, 2);
				{
				State = 413;
				Match(T__74);
				}
				break;
			case T__75:
				EnterOuterAlt(_localctx, 3);
				{
				State = 414;
				Match(T__75);
				}
				break;
			case T__76:
				EnterOuterAlt(_localctx, 4);
				{
				State = 415;
				Match(T__76);
				}
				break;
			case T__77:
				EnterOuterAlt(_localctx, 5);
				{
				State = 416;
				Match(T__77);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 417;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileTimeIntegerTypeContext : ParserRuleContext {
		public CompileTimeIntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileTimeIntegerType; } }
	}

	[RuleVersion(0)]
	public CompileTimeIntegerTypeContext compileTimeIntegerType() {
		CompileTimeIntegerTypeContext _localctx = new CompileTimeIntegerTypeContext(Context, State);
		EnterRule(_localctx, 92, RULE_compileTimeIntegerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		public RuntimeTypeCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeCase; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeCaseContext runtimeTypeCase() {
		RuntimeTypeCaseContext _localctx = new RuntimeTypeCaseContext(Context, State);
		EnterRule(_localctx, 94, RULE_runtimeTypeCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(T__4);
			State = 423;
			expression(0);
			State = 424;
			Match(T__5);
			State = 425;
			runtimeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeSwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext[] runtimeTypeCase() {
			return GetRuleContexts<RuntimeTypeCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext runtimeTypeCase(int i) {
			return GetRuleContext<RuntimeTypeCaseContext>(i);
		}
		public RuntimeTypeSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeSwitch; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeSwitchContext runtimeTypeSwitch() {
		RuntimeTypeSwitchContext _localctx = new RuntimeTypeSwitchContext(Context, State);
		EnterRule(_localctx, 96, RULE_runtimeTypeSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(T__7);
			State = 428;
			expression(0);
			State = 429;
			Match(T__8);
			State = 430;
			runtimeTypeCase();
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__42) {
				{
				{
				State = 431;
				Match(T__42);
				State = 432;
				runtimeTypeCase();
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 438;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeSwitchContext runtimeTypeSwitch() {
			return GetRuleContext<RuntimeTypeSwitchContext>(0);
		}
		public RuntimeTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeReference; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeReferenceContext runtimeTypeReference() {
		RuntimeTypeReferenceContext _localctx = new RuntimeTypeReferenceContext(Context, State);
		EnterRule(_localctx, 98, RULE_runtimeTypeReference);
		try {
			State = 442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 440;
				runtimeOperandType();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441;
				runtimeTypeSwitch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public OperandTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandTypeDeclaration; } }
	}

	[RuleVersion(0)]
	public OperandTypeDeclarationContext operandTypeDeclaration() {
		OperandTypeDeclarationContext _localctx = new OperandTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 100, RULE_operandTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(T__82);
			State = 445;
			identifier();
			State = 446;
			Match(T__11);
			State = 447;
			runtimeTypeReference();
			State = 451;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 448;
					line();
					}
					} 
				}
				State = 453;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UndefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefinedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
		UndefinedVariableDeclarationContext _localctx = new UndefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 102, RULE_undefinedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			variableType();
			State = 455;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public DefinedVariableDeclarationContext definedVariableDeclaration() {
		DefinedVariableDeclarationContext _localctx = new DefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_definedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			variableType();
			State = 458;
			identifier();
			State = 459;
			Match(T__11);
			State = 460;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
			return GetRuleContext<UndefinedVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedVariableDeclarationContext definedVariableDeclaration() {
			return GetRuleContext<DefinedVariableDeclarationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 106, RULE_variableDeclaration);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462;
				undefinedVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				definedVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 31: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,90,467,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,5,0,110,8,0,10,0,12,0,113,
		9,0,1,0,1,0,1,1,1,1,3,1,119,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,145,8,4,
		1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,
		9,164,8,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,175,8,11,10,
		11,12,11,178,9,11,1,11,1,11,1,12,1,12,3,12,184,8,12,1,13,1,13,1,13,1,13,
		1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,198,8,15,1,16,1,16,1,16,3,
		16,203,8,16,1,17,1,17,5,17,207,8,17,10,17,12,17,210,9,17,1,17,1,17,1,18,
		1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,226,8,20,1,
		21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,3,
		25,242,8,25,1,25,1,25,1,25,1,25,1,25,3,25,249,8,25,1,25,1,25,1,25,3,25,
		254,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,5,
		28,268,8,28,10,28,12,28,271,9,28,1,28,1,28,1,29,1,29,3,29,277,8,29,1,29,
		1,29,1,29,1,29,5,29,283,8,29,10,29,12,29,286,9,29,3,29,288,8,29,1,29,1,
		29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,303,8,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,341,8,31,10,31,12,31,344,
		9,31,1,32,1,32,1,32,1,32,3,32,350,8,32,1,33,1,33,3,33,354,8,33,1,33,3,
		33,357,8,33,1,34,1,34,5,34,361,8,34,10,34,12,34,364,9,34,1,34,1,34,1,35,
		1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,5,38,
		382,8,38,10,38,12,38,385,9,38,1,39,1,39,3,39,389,8,39,1,40,1,40,3,40,393,
		8,40,1,41,1,41,1,41,3,41,398,8,41,1,41,1,41,3,41,402,8,41,1,41,1,41,1,
		41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,419,
		8,45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,
		5,48,434,8,48,10,48,12,48,437,9,48,1,48,1,48,1,49,1,49,3,49,443,8,49,1,
		50,1,50,1,50,1,50,1,50,5,50,450,8,50,10,50,12,50,453,9,50,1,51,1,51,1,
		51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,3,53,465,8,53,1,53,0,1,62,54,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,0,10,1,0,17,32,1,0,35,37,1,0,46,51,2,0,35,35,52,52,1,0,53,
		56,3,0,42,42,44,44,57,62,1,0,63,64,1,0,72,73,1,0,84,86,1,0,79,82,481,0,
		111,1,0,0,0,2,118,1,0,0,0,4,120,1,0,0,0,6,126,1,0,0,0,8,144,1,0,0,0,10,
		146,1,0,0,0,12,150,1,0,0,0,14,154,1,0,0,0,16,156,1,0,0,0,18,158,1,0,0,
		0,20,165,1,0,0,0,22,170,1,0,0,0,24,181,1,0,0,0,26,185,1,0,0,0,28,189,1,
		0,0,0,30,193,1,0,0,0,32,199,1,0,0,0,34,204,1,0,0,0,36,213,1,0,0,0,38,215,
		1,0,0,0,40,225,1,0,0,0,42,227,1,0,0,0,44,229,1,0,0,0,46,234,1,0,0,0,48,
		237,1,0,0,0,50,253,1,0,0,0,52,255,1,0,0,0,54,259,1,0,0,0,56,263,1,0,0,
		0,58,274,1,0,0,0,60,291,1,0,0,0,62,302,1,0,0,0,64,349,1,0,0,0,66,356,1,
		0,0,0,68,358,1,0,0,0,70,367,1,0,0,0,72,373,1,0,0,0,74,375,1,0,0,0,76,378,
		1,0,0,0,78,388,1,0,0,0,80,392,1,0,0,0,82,394,1,0,0,0,84,406,1,0,0,0,86,
		408,1,0,0,0,88,410,1,0,0,0,90,418,1,0,0,0,92,420,1,0,0,0,94,422,1,0,0,
		0,96,427,1,0,0,0,98,442,1,0,0,0,100,444,1,0,0,0,102,454,1,0,0,0,104,457,
		1,0,0,0,106,464,1,0,0,0,108,110,3,2,1,0,109,108,1,0,0,0,110,113,1,0,0,
		0,111,109,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,
		115,5,0,0,1,115,1,1,0,0,0,116,119,3,82,41,0,117,119,3,72,36,0,118,116,
		1,0,0,0,118,117,1,0,0,0,119,3,1,0,0,0,120,121,5,1,0,0,121,122,3,62,31,
		0,122,123,3,62,31,0,123,124,3,62,31,0,124,125,3,62,31,0,125,5,1,0,0,0,
		126,127,5,1,0,0,127,128,3,62,31,0,128,129,3,62,31,0,129,130,3,62,31,0,
		130,7,1,0,0,0,131,145,3,34,17,0,132,145,3,100,50,0,133,145,3,106,53,0,
		134,145,3,24,12,0,135,145,3,26,13,0,136,145,3,28,14,0,137,145,3,30,15,
		0,138,145,3,16,8,0,139,145,3,22,11,0,140,145,3,20,10,0,141,145,3,12,6,
		0,142,145,3,14,7,0,143,145,3,4,2,0,144,131,1,0,0,0,144,132,1,0,0,0,144,
		133,1,0,0,0,144,134,1,0,0,0,144,135,1,0,0,0,144,136,1,0,0,0,144,137,1,
		0,0,0,144,138,1,0,0,0,144,139,1,0,0,0,144,140,1,0,0,0,144,141,1,0,0,0,
		144,142,1,0,0,0,144,143,1,0,0,0,145,9,1,0,0,0,146,147,5,2,0,0,147,148,
		3,80,40,0,148,149,3,62,31,0,149,11,1,0,0,0,150,151,5,3,0,0,151,152,3,62,
		31,0,152,153,3,62,31,0,153,13,1,0,0,0,154,155,5,4,0,0,155,15,1,0,0,0,156,
		157,3,58,29,0,157,17,1,0,0,0,158,159,5,5,0,0,159,160,3,62,31,0,160,161,
		5,6,0,0,161,163,3,8,4,0,162,164,5,4,0,0,163,162,1,0,0,0,163,164,1,0,0,
		0,164,19,1,0,0,0,165,166,5,7,0,0,166,167,3,62,31,0,167,168,3,84,42,0,168,
		169,3,34,17,0,169,21,1,0,0,0,170,171,5,8,0,0,171,172,3,62,31,0,172,176,
		5,9,0,0,173,175,3,18,9,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,
		0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,5,10,0,0,180,
		23,1,0,0,0,181,183,5,11,0,0,182,184,3,62,31,0,183,182,1,0,0,0,183,184,
		1,0,0,0,184,25,1,0,0,0,185,186,3,84,42,0,186,187,5,12,0,0,187,188,3,62,
		31,0,188,27,1,0,0,0,189,190,5,13,0,0,190,191,3,84,42,0,191,192,3,62,31,
		0,192,29,1,0,0,0,193,194,5,14,0,0,194,195,3,54,27,0,195,197,3,8,4,0,196,
		198,3,32,16,0,197,196,1,0,0,0,197,198,1,0,0,0,198,31,1,0,0,0,199,200,5,
		15,0,0,200,202,3,8,4,0,201,203,3,32,16,0,202,201,1,0,0,0,202,203,1,0,0,
		0,203,33,1,0,0,0,204,208,5,9,0,0,205,207,3,8,4,0,206,205,1,0,0,0,207,210,
		1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,
		0,211,212,5,10,0,0,212,35,1,0,0,0,213,214,3,84,42,0,214,37,1,0,0,0,215,
		216,5,16,0,0,216,217,3,36,18,0,217,39,1,0,0,0,218,226,3,36,18,0,219,226,
		3,38,19,0,220,226,3,54,27,0,221,226,3,88,44,0,222,226,3,86,43,0,223,226,
		3,44,22,0,224,226,3,42,21,0,225,218,1,0,0,0,225,219,1,0,0,0,225,220,1,
		0,0,0,225,221,1,0,0,0,225,222,1,0,0,0,225,223,1,0,0,0,225,224,1,0,0,0,
		226,41,1,0,0,0,227,228,7,0,0,0,228,43,1,0,0,0,229,230,5,33,0,0,230,231,
		3,80,40,0,231,232,5,34,0,0,232,233,3,62,31,0,233,45,1,0,0,0,234,235,7,
		1,0,0,235,236,3,40,20,0,236,47,1,0,0,0,237,238,5,38,0,0,238,49,1,0,0,0,
		239,241,5,39,0,0,240,242,3,48,24,0,241,240,1,0,0,0,241,242,1,0,0,0,242,
		243,1,0,0,0,243,244,3,80,40,0,244,245,3,62,31,0,245,254,1,0,0,0,246,248,
		5,40,0,0,247,249,3,48,24,0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,
		0,0,250,251,3,80,40,0,251,252,3,62,31,0,252,254,1,0,0,0,253,239,1,0,0,
		0,253,246,1,0,0,0,254,51,1,0,0,0,255,256,5,41,0,0,256,257,3,80,40,0,257,
		258,3,62,31,0,258,53,1,0,0,0,259,260,5,33,0,0,260,261,3,62,31,0,261,262,
		5,34,0,0,262,55,1,0,0,0,263,264,5,42,0,0,264,269,3,84,42,0,265,266,5,43,
		0,0,266,268,3,84,42,0,267,265,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,
		269,270,1,0,0,0,270,272,1,0,0,0,271,269,1,0,0,0,272,273,5,44,0,0,273,57,
		1,0,0,0,274,276,3,84,42,0,275,277,3,56,28,0,276,275,1,0,0,0,276,277,1,
		0,0,0,277,278,1,0,0,0,278,287,5,33,0,0,279,284,3,62,31,0,280,281,5,43,
		0,0,281,283,3,62,31,0,282,280,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,
		284,285,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,287,279,1,0,0,0,287,288,
		1,0,0,0,288,289,1,0,0,0,289,290,5,34,0,0,290,59,1,0,0,0,291,292,5,45,0,
		0,292,61,1,0,0,0,293,294,6,31,-1,0,294,303,3,58,29,0,295,303,3,10,5,0,
		296,303,3,40,20,0,297,303,3,46,23,0,298,303,3,50,25,0,299,303,3,52,26,
		0,300,303,3,6,3,0,301,303,3,60,30,0,302,293,1,0,0,0,302,295,1,0,0,0,302,
		296,1,0,0,0,302,297,1,0,0,0,302,298,1,0,0,0,302,299,1,0,0,0,302,300,1,
		0,0,0,302,301,1,0,0,0,303,342,1,0,0,0,304,305,10,11,0,0,305,306,7,2,0,
		0,306,341,3,62,31,12,307,308,10,10,0,0,308,309,7,3,0,0,309,341,3,62,31,
		11,310,311,10,9,0,0,311,312,7,4,0,0,312,341,3,62,31,10,313,314,10,8,0,
		0,314,315,7,5,0,0,315,341,3,62,31,9,316,317,10,7,0,0,317,318,7,6,0,0,318,
		341,3,62,31,8,319,320,10,6,0,0,320,321,5,65,0,0,321,341,3,62,31,7,322,
		323,10,5,0,0,323,324,5,66,0,0,324,341,3,62,31,6,325,326,10,4,0,0,326,327,
		5,67,0,0,327,341,3,62,31,5,328,329,10,3,0,0,329,330,5,68,0,0,330,341,3,
		62,31,4,331,332,10,2,0,0,332,333,5,69,0,0,333,341,3,62,31,3,334,335,10,
		1,0,0,335,336,5,70,0,0,336,337,3,62,31,0,337,338,5,6,0,0,338,339,3,62,
		31,2,339,341,1,0,0,0,340,304,1,0,0,0,340,307,1,0,0,0,340,310,1,0,0,0,340,
		313,1,0,0,0,340,316,1,0,0,0,340,319,1,0,0,0,340,322,1,0,0,0,340,325,1,
		0,0,0,340,328,1,0,0,0,340,331,1,0,0,0,340,334,1,0,0,0,341,344,1,0,0,0,
		342,340,1,0,0,0,342,343,1,0,0,0,343,63,1,0,0,0,344,342,1,0,0,0,345,346,
		5,64,0,0,346,350,3,88,44,0,347,348,5,63,0,0,348,350,3,88,44,0,349,345,
		1,0,0,0,349,347,1,0,0,0,350,65,1,0,0,0,351,353,3,84,42,0,352,354,3,64,
		32,0,353,352,1,0,0,0,353,354,1,0,0,0,354,357,1,0,0,0,355,357,3,88,44,0,
		356,351,1,0,0,0,356,355,1,0,0,0,357,67,1,0,0,0,358,362,5,33,0,0,359,361,
		3,66,33,0,360,359,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,
		0,0,363,365,1,0,0,0,364,362,1,0,0,0,365,366,5,34,0,0,366,69,1,0,0,0,367,
		368,5,71,0,0,368,369,3,88,44,0,369,370,3,84,42,0,370,371,3,68,34,0,371,
		372,3,34,17,0,372,71,1,0,0,0,373,374,3,70,35,0,374,73,1,0,0,0,375,376,
		3,80,40,0,376,377,3,84,42,0,377,75,1,0,0,0,378,383,3,74,37,0,379,380,5,
		43,0,0,380,382,3,74,37,0,381,379,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,
		0,383,384,1,0,0,0,384,77,1,0,0,0,385,383,1,0,0,0,386,389,3,34,17,0,387,
		389,5,16,0,0,388,386,1,0,0,0,388,387,1,0,0,0,389,79,1,0,0,0,390,393,3,
		90,45,0,391,393,3,92,46,0,392,390,1,0,0,0,392,391,1,0,0,0,393,81,1,0,0,
		0,394,395,3,80,40,0,395,397,3,84,42,0,396,398,3,56,28,0,397,396,1,0,0,
		0,397,398,1,0,0,0,398,399,1,0,0,0,399,401,5,33,0,0,400,402,3,76,38,0,401,
		400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,404,5,34,0,0,404,405,3,
		78,39,0,405,83,1,0,0,0,406,407,5,87,0,0,407,85,1,0,0,0,408,409,7,7,0,0,
		409,87,1,0,0,0,410,411,7,8,0,0,411,89,1,0,0,0,412,419,5,74,0,0,413,419,
		5,75,0,0,414,419,5,76,0,0,415,419,5,77,0,0,416,419,5,78,0,0,417,419,3,
		84,42,0,418,412,1,0,0,0,418,413,1,0,0,0,418,414,1,0,0,0,418,415,1,0,0,
		0,418,416,1,0,0,0,418,417,1,0,0,0,419,91,1,0,0,0,420,421,7,9,0,0,421,93,
		1,0,0,0,422,423,5,5,0,0,423,424,3,62,31,0,424,425,5,6,0,0,425,426,3,98,
		49,0,426,95,1,0,0,0,427,428,5,8,0,0,428,429,3,62,31,0,429,430,5,9,0,0,
		430,435,3,94,47,0,431,432,5,43,0,0,432,434,3,94,47,0,433,431,1,0,0,0,434,
		437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,435,1,
		0,0,0,438,439,5,10,0,0,439,97,1,0,0,0,440,443,3,90,45,0,441,443,3,96,48,
		0,442,440,1,0,0,0,442,441,1,0,0,0,443,99,1,0,0,0,444,445,5,83,0,0,445,
		446,3,84,42,0,446,447,5,12,0,0,447,451,3,98,49,0,448,450,3,8,4,0,449,448,
		1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,101,1,0,0,
		0,453,451,1,0,0,0,454,455,3,80,40,0,455,456,3,84,42,0,456,103,1,0,0,0,
		457,458,3,80,40,0,458,459,3,84,42,0,459,460,5,12,0,0,460,461,3,62,31,0,
		461,105,1,0,0,0,462,465,3,102,51,0,463,465,3,104,52,0,464,462,1,0,0,0,
		464,463,1,0,0,0,465,107,1,0,0,0,34,111,118,144,163,176,183,197,202,208,
		225,241,248,253,269,276,284,287,302,340,342,349,353,356,362,383,388,392,
		397,401,418,435,442,451,464
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
