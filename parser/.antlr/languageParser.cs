//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/linvirt/code/rem_frontend_generator/parser/language.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class languageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		DECIMAL=74, BINARY=75, HEX=76, IDENTIFIER=77, WHITE_SPACE=78, LINE_COMMENT=79;
	public const int
		RULE_sourceFile = 0, RULE_topLevelDeclarations = 1, RULE_line = 2, RULE_semiColin = 3, 
		RULE_functionCallLine = 4, RULE_caseStatement = 5, RULE_loopStatement = 6, 
		RULE_switchStatement = 7, RULE_returnStatement = 8, RULE_lValueSet = 9, 
		RULE_ifStatement = 10, RULE_elseStatement = 11, RULE_scope = 12, RULE_identifierExpression = 13, 
		RULE_baseExpression = 14, RULE_constants = 15, RULE_cast = 16, RULE_unaryExpression = 17, 
		RULE_signExtend = 18, RULE_parenthesis = 19, RULE_genericImpl = 20, RULE_functionCall = 21, 
		RULE_expression = 22, RULE_fixedLengthInstructionOperand = 23, RULE_fixedLengthInstructionOperands = 24, 
		RULE_fixedLengthInstruction = 25, RULE_instructionDeclaration = 26, RULE_functionParameter = 27, 
		RULE_functionParameters = 28, RULE_functionBody = 29, RULE_variableType = 30, 
		RULE_functionDeclaration = 31, RULE_identifier = 32, RULE_trueFalse = 33, 
		RULE_number = 34, RULE_runtimeOperandType = 35, RULE_compileTimeIntegerType = 36, 
		RULE_runtimeTypeCase = 37, RULE_runtimeTypeSwitch = 38, RULE_runtimeTypeReference = 39, 
		RULE_operandTypeDeclaration = 40, RULE_undefinedVariableDeclaration = 41, 
		RULE_definedVariableDeclaration = 42, RULE_variableDeclaration = 43;
	public static readonly string[] ruleNames = {
		"sourceFile", "topLevelDeclarations", "line", "semiColin", "functionCallLine", 
		"caseStatement", "loopStatement", "switchStatement", "returnStatement", 
		"lValueSet", "ifStatement", "elseStatement", "scope", "identifierExpression", 
		"baseExpression", "constants", "cast", "unaryExpression", "signExtend", 
		"parenthesis", "genericImpl", "functionCall", "expression", "fixedLengthInstructionOperand", 
		"fixedLengthInstructionOperands", "fixedLengthInstruction", "instructionDeclaration", 
		"functionParameter", "functionParameters", "functionBody", "variableType", 
		"functionDeclaration", "identifier", "trueFalse", "number", "runtimeOperandType", 
		"compileTimeIntegerType", "runtimeTypeCase", "runtimeTypeSwitch", "runtimeTypeReference", 
		"operandTypeDeclaration", "undefinedVariableDeclaration", "definedVariableDeclaration", 
		"variableDeclaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'case'", "':'", "'loop'", "'switch'", "'{'", "'}'", "'return'", 
		"'='", "'if'", "'else'", "'UINT8_MIN'", "'INT8_MIN'", "'UINT16_MIN'", 
		"'INT16_MIN'", "'UINT32_MIN'", "'INT32_MIN'", "'UINT64_MIN'", "'INT64_MIN'", 
		"'UINT8_MAX'", "'INT8_MAX'", "'UINT16_MAX'", "'INT16_MAX'", "'UINT32_MAX'", 
		"'INT32_MAX'", "'UINT64_MAX'", "'INT64_MAX'", "'('", "')'", "'-'", "'~'", 
		"'!'", "'extend'", "'<'", "','", "'>'", "'*'", "'/'", "'sdiv'", "'%'", 
		"'+'", "'<<'", "'>>'", "'sar'", "'ror'", "'clt'", "'cgt'", "'clte'", "'cgte'", 
		"'<='", "'>='", "'=='", "'!='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'?'", 
		"'fl_instruction'", "'external'", "'true'", "'false'", "'o8'", "'o16'", 
		"'o32'", "'o64'", "'o128'", "'i64'", "'integer'", "'int'", "'void'", "'o_type'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "DECIMAL", "BINARY", "HEX", "IDENTIFIER", "WHITE_SPACE", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static languageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public languageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public languageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(languageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext[] topLevelDeclarations() {
			return GetRuleContexts<TopLevelDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext topLevelDeclarations(int i) {
			return GetRuleContext<TopLevelDeclarationsContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 139249L) != 0)) {
				{
				{
				State = 88;
				topLevelDeclarations();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 94;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionDeclarationContext instructionDeclaration() {
			return GetRuleContext<InstructionDeclarationContext>(0);
		}
		public TopLevelDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclarations; } }
	}

	[RuleVersion(0)]
	public TopLevelDeclarationsContext topLevelDeclarations() {
		TopLevelDeclarationsContext _localctx = new TopLevelDeclarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelDeclarations);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				functionDeclaration();
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				instructionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandTypeDeclarationContext operandTypeDeclaration() {
			return GetRuleContext<OperandTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueSetContext lValueSet() {
			return GetRuleContext<LValueSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallLineContext functionCallLine() {
			return GetRuleContext<FunctionCallLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiColinContext semiColin() {
			return GetRuleContext<SemiColinContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 4, RULE_line);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				scope();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				operandTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				returnStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				lValueSet();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 105;
				ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 106;
				functionCallLine();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 107;
				switchStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 108;
				loopStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 109;
				semiColin();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiColinContext : ParserRuleContext {
		public SemiColinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semiColin; } }
	}

	[RuleVersion(0)]
	public SemiColinContext semiColin() {
		SemiColinContext _localctx = new SemiColinContext(Context, State);
		EnterRule(_localctx, 6, RULE_semiColin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallLine; } }
	}

	[RuleVersion(0)]
	public FunctionCallLineContext functionCallLine() {
		FunctionCallLineContext _localctx = new FunctionCallLineContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionCallLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(T__1);
			State = 117;
			expression(0);
			State = 118;
			Match(T__2);
			State = 119;
			line();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 120;
				Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_loopStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(T__3);
			State = 124;
			expression(0);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 125;
				identifier();
				}
			}

			State = 128;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(T__4);
			State = 131;
			expression(0);
			State = 132;
			Match(T__5);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 133;
				caseStatement();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 139;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__7);
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 142;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LValueSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueSet; } }
	}

	[RuleVersion(0)]
	public LValueSetContext lValueSet() {
		LValueSetContext _localctx = new LValueSetContext(Context, State);
		EnterRule(_localctx, 18, RULE_lValueSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			identifier();
			State = 146;
			Match(T__8);
			State = 147;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(T__9);
			State = 150;
			parenthesis();
			State = 151;
			line();
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 152;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(T__10);
			State = 156;
			line();
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 157;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 24, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(T__5);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1394L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9215L) != 0)) {
				{
				{
				State = 161;
				line();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierExpression; } }
	}

	[RuleVersion(0)]
	public IdentifierExpressionContext identifierExpression() {
		IdentifierExpressionContext _localctx = new IdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_identifierExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierExpressionContext identifierExpression() {
			return GetRuleContext<IdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueFalseContext trueFalse() {
			return GetRuleContext<TrueFalseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		public BaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseExpression; } }
	}

	[RuleVersion(0)]
	public BaseExpressionContext baseExpression() {
		BaseExpressionContext _localctx = new BaseExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_baseExpression);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				identifierExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				parenthesis();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173;
				number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174;
				trueFalse();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 175;
				cast();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 176;
				constants();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 30, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 268431360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 32, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__27);
			State = 182;
			variableType();
			State = 183;
			Match(T__28);
			State = 184;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7516192768L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 187;
			baseExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignExtendContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignExtendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signExtend; } }
	}

	[RuleVersion(0)]
	public SignExtendContext signExtend() {
		SignExtendContext _localctx = new SignExtendContext(Context, State);
		EnterRule(_localctx, 36, RULE_signExtend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__32);
			State = 190;
			variableType();
			State = 191;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis; } }
	}

	[RuleVersion(0)]
	public ParenthesisContext parenthesis() {
		ParenthesisContext _localctx = new ParenthesisContext(Context, State);
		EnterRule(_localctx, 38, RULE_parenthesis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(T__27);
			State = 194;
			expression(0);
			State = 195;
			Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public GenericImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericImpl; } }
	}

	[RuleVersion(0)]
	public GenericImplContext genericImpl() {
		GenericImplContext _localctx = new GenericImplContext(Context, State);
		EnterRule(_localctx, 40, RULE_genericImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__33);
			State = 198;
			identifier();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__34) {
				{
				{
				State = 199;
				Match(T__34);
				State = 200;
				identifier();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 206;
			Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			identifier();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 209;
				genericImpl();
				}
			}

			State = 212;
			Match(T__27);
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686001784393728L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 15L) != 0)) {
				{
				State = 213;
				expression(0);
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__34) {
					{
					{
					State = 214;
					Match(T__34);
					State = 215;
					expression(0);
					}
					}
					State = 220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 223;
			Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignExtendContext signExtend() {
			return GetRuleContext<SignExtendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 226;
				baseExpression();
				}
				break;
			case 2:
				{
				State = 227;
				unaryExpression();
				}
				break;
			case 3:
				{
				State = 228;
				functionCall();
				}
				break;
			case 4:
				{
				State = 229;
				signExtend();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 268;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 232;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 233;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2061584302080L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 234;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 235;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 236;
						_la = TokenStream.LA(1);
						if ( !(_la==T__29 || _la==T__40) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 237;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 238;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 239;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 65970697666560L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 240;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 241;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 242;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4433316782538752L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 243;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 244;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 245;
						_la = TokenStream.LA(1);
						if ( !(_la==T__51 || _la==T__52) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 246;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 247;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 248;
						Match(T__53);
						State = 249;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 250;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 251;
						Match(T__54);
						State = 252;
						expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 253;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 254;
						Match(T__55);
						State = 255;
						expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 256;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 257;
						Match(T__56);
						State = 258;
						expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 259;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 260;
						Match(T__57);
						State = 261;
						expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 262;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 263;
						Match(T__58);
						State = 264;
						expression(0);
						State = 265;
						Match(T__2);
						State = 266;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public FixedLengthInstructionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperand; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandContext fixedLengthInstructionOperand() {
		FixedLengthInstructionOperandContext _localctx = new FixedLengthInstructionOperandContext(Context, State);
		EnterRule(_localctx, 46, RULE_fixedLengthInstructionOperand);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				identifier();
				}
				break;
			case DECIMAL:
			case BINARY:
			case HEX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext[] fixedLengthInstructionOperand() {
			return GetRuleContexts<FixedLengthInstructionOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext fixedLengthInstructionOperand(int i) {
			return GetRuleContext<FixedLengthInstructionOperandContext>(i);
		}
		public FixedLengthInstructionOperandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperands; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
		FixedLengthInstructionOperandsContext _localctx = new FixedLengthInstructionOperandsContext(Context, State);
		EnterRule(_localctx, 48, RULE_fixedLengthInstructionOperands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(T__27);
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 15L) != 0)) {
				{
				{
				State = 278;
				fixedLengthInstructionOperand();
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 284;
			Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
			return GetRuleContext<FixedLengthInstructionOperandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FixedLengthInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstruction; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionContext fixedLengthInstruction() {
		FixedLengthInstructionContext _localctx = new FixedLengthInstructionContext(Context, State);
		EnterRule(_localctx, 50, RULE_fixedLengthInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(T__59);
			State = 287;
			number();
			State = 288;
			identifier();
			State = 289;
			fixedLengthInstructionOperands();
			State = 290;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionContext fixedLengthInstruction() {
			return GetRuleContext<FixedLengthInstructionContext>(0);
		}
		public InstructionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionDeclaration; } }
	}

	[RuleVersion(0)]
	public InstructionDeclarationContext instructionDeclaration() {
		InstructionDeclarationContext _localctx = new InstructionDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_instructionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			fixedLengthInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			variableType();
			State = 295;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			functionParameter();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__34) {
				{
				{
				State = 298;
				Match(T__34);
				State = 299;
				functionParameter();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionBody);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				scope();
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				Match(T__60);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompileTimeIntegerTypeContext compileTimeIntegerType() {
			return GetRuleContext<CompileTimeIntegerTypeContext>(0);
		}
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_variableType);
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				runtimeOperandType();
				}
				break;
			case T__68:
			case T__69:
			case T__70:
			case T__71:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				compileTimeIntegerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			variableType();
			State = 314;
			identifier();
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 315;
				genericImpl();
				}
			}

			State = 318;
			Match(T__27);
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8703L) != 0)) {
				{
				State = 319;
				functionParameters();
				}
			}

			State = 322;
			Match(T__28);
			State = 323;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(languageParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueFalseContext : ParserRuleContext {
		public TrueFalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueFalse; } }
	}

	[RuleVersion(0)]
	public TrueFalseContext trueFalse() {
		TrueFalseContext _localctx = new TrueFalseContext(Context, State);
		EnterRule(_localctx, 66, RULE_trueFalse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			_la = TokenStream.LA(1);
			if ( !(_la==T__61 || _la==T__62) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(languageParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(languageParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(languageParser.HEX, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 68, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeOperandTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RuntimeOperandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeOperandType; } }
	}

	[RuleVersion(0)]
	public RuntimeOperandTypeContext runtimeOperandType() {
		RuntimeOperandTypeContext _localctx = new RuntimeOperandTypeContext(Context, State);
		EnterRule(_localctx, 70, RULE_runtimeOperandType);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__63:
				EnterOuterAlt(_localctx, 1);
				{
				State = 331;
				Match(T__63);
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 332;
				Match(T__64);
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 3);
				{
				State = 333;
				Match(T__65);
				}
				break;
			case T__66:
				EnterOuterAlt(_localctx, 4);
				{
				State = 334;
				Match(T__66);
				}
				break;
			case T__67:
				EnterOuterAlt(_localctx, 5);
				{
				State = 335;
				Match(T__67);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 336;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileTimeIntegerTypeContext : ParserRuleContext {
		public CompileTimeIntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileTimeIntegerType; } }
	}

	[RuleVersion(0)]
	public CompileTimeIntegerTypeContext compileTimeIntegerType() {
		CompileTimeIntegerTypeContext _localctx = new CompileTimeIntegerTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_compileTimeIntegerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		public RuntimeTypeCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeCase; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeCaseContext runtimeTypeCase() {
		RuntimeTypeCaseContext _localctx = new RuntimeTypeCaseContext(Context, State);
		EnterRule(_localctx, 74, RULE_runtimeTypeCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(T__1);
			State = 342;
			expression(0);
			State = 343;
			Match(T__2);
			State = 344;
			runtimeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeSwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext[] runtimeTypeCase() {
			return GetRuleContexts<RuntimeTypeCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext runtimeTypeCase(int i) {
			return GetRuleContext<RuntimeTypeCaseContext>(i);
		}
		public RuntimeTypeSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeSwitch; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeSwitchContext runtimeTypeSwitch() {
		RuntimeTypeSwitchContext _localctx = new RuntimeTypeSwitchContext(Context, State);
		EnterRule(_localctx, 76, RULE_runtimeTypeSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			Match(T__4);
			State = 347;
			expression(0);
			State = 348;
			Match(T__5);
			State = 349;
			runtimeTypeCase();
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__34) {
				{
				{
				State = 350;
				Match(T__34);
				State = 351;
				runtimeTypeCase();
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 357;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeSwitchContext runtimeTypeSwitch() {
			return GetRuleContext<RuntimeTypeSwitchContext>(0);
		}
		public RuntimeTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeReference; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeReferenceContext runtimeTypeReference() {
		RuntimeTypeReferenceContext _localctx = new RuntimeTypeReferenceContext(Context, State);
		EnterRule(_localctx, 78, RULE_runtimeTypeReference);
		try {
			State = 361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				runtimeOperandType();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 360;
				runtimeTypeSwitch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public OperandTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandTypeDeclaration; } }
	}

	[RuleVersion(0)]
	public OperandTypeDeclarationContext operandTypeDeclaration() {
		OperandTypeDeclarationContext _localctx = new OperandTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_operandTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(T__72);
			State = 364;
			identifier();
			State = 365;
			Match(T__8);
			State = 366;
			runtimeTypeReference();
			State = 370;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 367;
					line();
					}
					} 
				}
				State = 372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UndefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefinedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
		UndefinedVariableDeclarationContext _localctx = new UndefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 82, RULE_undefinedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			variableType();
			State = 374;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public DefinedVariableDeclarationContext definedVariableDeclaration() {
		DefinedVariableDeclarationContext _localctx = new DefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 84, RULE_definedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			variableType();
			State = 377;
			identifier();
			State = 378;
			Match(T__8);
			State = 379;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
			return GetRuleContext<UndefinedVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedVariableDeclarationContext definedVariableDeclaration() {
			return GetRuleContext<DefinedVariableDeclarationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_variableDeclaration);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 381;
				undefinedVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382;
				definedVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,79,386,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,1,0,5,0,90,8,0,10,0,12,0,93,9,0,1,0,1,0,1,1,1,1,3,1,99,8,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,111,8,2,1,3,1,3,1,4,1,4,1,5,
		1,5,1,5,1,5,1,5,3,5,122,8,5,1,6,1,6,1,6,3,6,127,8,6,1,6,1,6,1,7,1,7,1,
		7,1,7,5,7,135,8,7,10,7,12,7,138,9,7,1,7,1,7,1,8,1,8,3,8,144,8,8,1,9,1,
		9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,154,8,10,1,11,1,11,1,11,3,11,159,8,
		11,1,12,1,12,5,12,163,8,12,10,12,12,12,166,9,12,1,12,1,12,1,13,1,13,1,
		14,1,14,1,14,1,14,1,14,1,14,3,14,178,8,14,1,15,1,15,1,16,1,16,1,16,1,16,
		1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
		1,20,1,20,5,20,202,8,20,10,20,12,20,205,9,20,1,20,1,20,1,21,1,21,3,21,
		211,8,21,1,21,1,21,1,21,1,21,5,21,217,8,21,10,21,12,21,220,9,21,3,21,222,
		8,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,231,8,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,5,22,269,8,22,10,22,12,22,272,9,22,1,23,1,23,3,
		23,276,8,23,1,24,1,24,5,24,280,8,24,10,24,12,24,283,9,24,1,24,1,24,1,25,
		1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,5,28,
		301,8,28,10,28,12,28,304,9,28,1,29,1,29,3,29,308,8,29,1,30,1,30,3,30,312,
		8,30,1,31,1,31,1,31,3,31,317,8,31,1,31,1,31,3,31,321,8,31,1,31,1,31,1,
		31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,338,
		8,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,
		5,38,353,8,38,10,38,12,38,356,9,38,1,38,1,38,1,39,1,39,3,39,362,8,39,1,
		40,1,40,1,40,1,40,1,40,5,40,369,8,40,10,40,12,40,372,9,40,1,41,1,41,1,
		41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,3,43,384,8,43,1,43,0,1,44,44,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,0,10,1,0,12,27,1,0,
		30,32,1,0,37,40,2,0,30,30,41,41,1,0,42,45,3,0,34,34,36,36,46,51,1,0,52,
		53,1,0,62,63,1,0,74,76,1,0,69,72,398,0,91,1,0,0,0,2,98,1,0,0,0,4,110,1,
		0,0,0,6,112,1,0,0,0,8,114,1,0,0,0,10,116,1,0,0,0,12,123,1,0,0,0,14,130,
		1,0,0,0,16,141,1,0,0,0,18,145,1,0,0,0,20,149,1,0,0,0,22,155,1,0,0,0,24,
		160,1,0,0,0,26,169,1,0,0,0,28,177,1,0,0,0,30,179,1,0,0,0,32,181,1,0,0,
		0,34,186,1,0,0,0,36,189,1,0,0,0,38,193,1,0,0,0,40,197,1,0,0,0,42,208,1,
		0,0,0,44,230,1,0,0,0,46,275,1,0,0,0,48,277,1,0,0,0,50,286,1,0,0,0,52,292,
		1,0,0,0,54,294,1,0,0,0,56,297,1,0,0,0,58,307,1,0,0,0,60,311,1,0,0,0,62,
		313,1,0,0,0,64,325,1,0,0,0,66,327,1,0,0,0,68,329,1,0,0,0,70,337,1,0,0,
		0,72,339,1,0,0,0,74,341,1,0,0,0,76,346,1,0,0,0,78,361,1,0,0,0,80,363,1,
		0,0,0,82,373,1,0,0,0,84,376,1,0,0,0,86,383,1,0,0,0,88,90,3,2,1,0,89,88,
		1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,91,
		1,0,0,0,94,95,5,0,0,1,95,1,1,0,0,0,96,99,3,62,31,0,97,99,3,52,26,0,98,
		96,1,0,0,0,98,97,1,0,0,0,99,3,1,0,0,0,100,111,3,24,12,0,101,111,3,80,40,
		0,102,111,3,86,43,0,103,111,3,16,8,0,104,111,3,18,9,0,105,111,3,20,10,
		0,106,111,3,8,4,0,107,111,3,14,7,0,108,111,3,12,6,0,109,111,3,6,3,0,110,
		100,1,0,0,0,110,101,1,0,0,0,110,102,1,0,0,0,110,103,1,0,0,0,110,104,1,
		0,0,0,110,105,1,0,0,0,110,106,1,0,0,0,110,107,1,0,0,0,110,108,1,0,0,0,
		110,109,1,0,0,0,111,5,1,0,0,0,112,113,5,1,0,0,113,7,1,0,0,0,114,115,3,
		42,21,0,115,9,1,0,0,0,116,117,5,2,0,0,117,118,3,44,22,0,118,119,5,3,0,
		0,119,121,3,4,2,0,120,122,5,1,0,0,121,120,1,0,0,0,121,122,1,0,0,0,122,
		11,1,0,0,0,123,124,5,4,0,0,124,126,3,44,22,0,125,127,3,64,32,0,126,125,
		1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,3,24,12,0,129,13,1,0,0,
		0,130,131,5,5,0,0,131,132,3,44,22,0,132,136,5,6,0,0,133,135,3,10,5,0,134,
		133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,139,1,
		0,0,0,138,136,1,0,0,0,139,140,5,7,0,0,140,15,1,0,0,0,141,143,5,8,0,0,142,
		144,3,44,22,0,143,142,1,0,0,0,143,144,1,0,0,0,144,17,1,0,0,0,145,146,3,
		64,32,0,146,147,5,9,0,0,147,148,3,44,22,0,148,19,1,0,0,0,149,150,5,10,
		0,0,150,151,3,38,19,0,151,153,3,4,2,0,152,154,3,22,11,0,153,152,1,0,0,
		0,153,154,1,0,0,0,154,21,1,0,0,0,155,156,5,11,0,0,156,158,3,4,2,0,157,
		159,3,22,11,0,158,157,1,0,0,0,158,159,1,0,0,0,159,23,1,0,0,0,160,164,5,
		6,0,0,161,163,3,4,2,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,
		164,165,1,0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,5,7,0,0,168,25,
		1,0,0,0,169,170,3,64,32,0,170,27,1,0,0,0,171,178,3,26,13,0,172,178,3,38,
		19,0,173,178,3,68,34,0,174,178,3,66,33,0,175,178,3,32,16,0,176,178,3,30,
		15,0,177,171,1,0,0,0,177,172,1,0,0,0,177,173,1,0,0,0,177,174,1,0,0,0,177,
		175,1,0,0,0,177,176,1,0,0,0,178,29,1,0,0,0,179,180,7,0,0,0,180,31,1,0,
		0,0,181,182,5,28,0,0,182,183,3,60,30,0,183,184,5,29,0,0,184,185,3,44,22,
		0,185,33,1,0,0,0,186,187,7,1,0,0,187,188,3,28,14,0,188,35,1,0,0,0,189,
		190,5,33,0,0,190,191,3,60,30,0,191,192,3,44,22,0,192,37,1,0,0,0,193,194,
		5,28,0,0,194,195,3,44,22,0,195,196,5,29,0,0,196,39,1,0,0,0,197,198,5,34,
		0,0,198,203,3,64,32,0,199,200,5,35,0,0,200,202,3,64,32,0,201,199,1,0,0,
		0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,
		203,1,0,0,0,206,207,5,36,0,0,207,41,1,0,0,0,208,210,3,64,32,0,209,211,
		3,40,20,0,210,209,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,221,5,28,
		0,0,213,218,3,44,22,0,214,215,5,35,0,0,215,217,3,44,22,0,216,214,1,0,0,
		0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,222,1,0,0,0,220,
		218,1,0,0,0,221,213,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,5,
		29,0,0,224,43,1,0,0,0,225,226,6,22,-1,0,226,231,3,28,14,0,227,231,3,34,
		17,0,228,231,3,42,21,0,229,231,3,36,18,0,230,225,1,0,0,0,230,227,1,0,0,
		0,230,228,1,0,0,0,230,229,1,0,0,0,231,270,1,0,0,0,232,233,10,11,0,0,233,
		234,7,2,0,0,234,269,3,44,22,12,235,236,10,10,0,0,236,237,7,3,0,0,237,269,
		3,44,22,11,238,239,10,9,0,0,239,240,7,4,0,0,240,269,3,44,22,10,241,242,
		10,8,0,0,242,243,7,5,0,0,243,269,3,44,22,9,244,245,10,7,0,0,245,246,7,
		6,0,0,246,269,3,44,22,8,247,248,10,6,0,0,248,249,5,54,0,0,249,269,3,44,
		22,7,250,251,10,5,0,0,251,252,5,55,0,0,252,269,3,44,22,6,253,254,10,4,
		0,0,254,255,5,56,0,0,255,269,3,44,22,5,256,257,10,3,0,0,257,258,5,57,0,
		0,258,269,3,44,22,4,259,260,10,2,0,0,260,261,5,58,0,0,261,269,3,44,22,
		3,262,263,10,1,0,0,263,264,5,59,0,0,264,265,3,44,22,0,265,266,5,3,0,0,
		266,267,3,44,22,2,267,269,1,0,0,0,268,232,1,0,0,0,268,235,1,0,0,0,268,
		238,1,0,0,0,268,241,1,0,0,0,268,244,1,0,0,0,268,247,1,0,0,0,268,250,1,
		0,0,0,268,253,1,0,0,0,268,256,1,0,0,0,268,259,1,0,0,0,268,262,1,0,0,0,
		269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,45,1,0,0,0,272,270,
		1,0,0,0,273,276,3,64,32,0,274,276,3,68,34,0,275,273,1,0,0,0,275,274,1,
		0,0,0,276,47,1,0,0,0,277,281,5,28,0,0,278,280,3,46,23,0,279,278,1,0,0,
		0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,
		281,1,0,0,0,284,285,5,29,0,0,285,49,1,0,0,0,286,287,5,60,0,0,287,288,3,
		68,34,0,288,289,3,64,32,0,289,290,3,48,24,0,290,291,3,24,12,0,291,51,1,
		0,0,0,292,293,3,50,25,0,293,53,1,0,0,0,294,295,3,60,30,0,295,296,3,64,
		32,0,296,55,1,0,0,0,297,302,3,54,27,0,298,299,5,35,0,0,299,301,3,54,27,
		0,300,298,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,
		57,1,0,0,0,304,302,1,0,0,0,305,308,3,24,12,0,306,308,5,61,0,0,307,305,
		1,0,0,0,307,306,1,0,0,0,308,59,1,0,0,0,309,312,3,70,35,0,310,312,3,72,
		36,0,311,309,1,0,0,0,311,310,1,0,0,0,312,61,1,0,0,0,313,314,3,60,30,0,
		314,316,3,64,32,0,315,317,3,40,20,0,316,315,1,0,0,0,316,317,1,0,0,0,317,
		318,1,0,0,0,318,320,5,28,0,0,319,321,3,56,28,0,320,319,1,0,0,0,320,321,
		1,0,0,0,321,322,1,0,0,0,322,323,5,29,0,0,323,324,3,58,29,0,324,63,1,0,
		0,0,325,326,5,77,0,0,326,65,1,0,0,0,327,328,7,7,0,0,328,67,1,0,0,0,329,
		330,7,8,0,0,330,69,1,0,0,0,331,338,5,64,0,0,332,338,5,65,0,0,333,338,5,
		66,0,0,334,338,5,67,0,0,335,338,5,68,0,0,336,338,3,64,32,0,337,331,1,0,
		0,0,337,332,1,0,0,0,337,333,1,0,0,0,337,334,1,0,0,0,337,335,1,0,0,0,337,
		336,1,0,0,0,338,71,1,0,0,0,339,340,7,9,0,0,340,73,1,0,0,0,341,342,5,2,
		0,0,342,343,3,44,22,0,343,344,5,3,0,0,344,345,3,78,39,0,345,75,1,0,0,0,
		346,347,5,5,0,0,347,348,3,44,22,0,348,349,5,6,0,0,349,354,3,74,37,0,350,
		351,5,35,0,0,351,353,3,74,37,0,352,350,1,0,0,0,353,356,1,0,0,0,354,352,
		1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,354,1,0,0,0,357,358,5,7,0,
		0,358,77,1,0,0,0,359,362,3,70,35,0,360,362,3,76,38,0,361,359,1,0,0,0,361,
		360,1,0,0,0,362,79,1,0,0,0,363,364,5,73,0,0,364,365,3,64,32,0,365,366,
		5,9,0,0,366,370,3,78,39,0,367,369,3,4,2,0,368,367,1,0,0,0,369,372,1,0,
		0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,81,1,0,0,0,372,370,1,0,0,0,373,
		374,3,60,30,0,374,375,3,64,32,0,375,83,1,0,0,0,376,377,3,60,30,0,377,378,
		3,64,32,0,378,379,5,9,0,0,379,380,3,44,22,0,380,85,1,0,0,0,381,384,3,82,
		41,0,382,384,3,84,42,0,383,381,1,0,0,0,383,382,1,0,0,0,384,87,1,0,0,0,
		30,91,98,110,121,126,136,143,153,158,164,177,203,210,218,221,230,268,270,
		275,281,302,307,311,316,320,337,354,361,370,383
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
