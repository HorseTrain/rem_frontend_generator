//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/linvirt/code/rem_frontend_generator/parser/language.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class languageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, DECIMAL=80, 
		BINARY=81, HEX=82, IDENTIFIER=83, WHITE_SPACE=84, LINE_COMMENT=85, BLOB_COMMENT=86;
	public const int
		RULE_sourceFile = 0, RULE_topLevelDeclarations = 1, RULE_elementInsert = 2, 
		RULE_elementExtract = 3, RULE_line = 4, RULE_hostMemoryRead = 5, RULE_hostMemoryWrite = 6, 
		RULE_semiColin = 7, RULE_functionCallLine = 8, RULE_caseStatement = 9, 
		RULE_loopStatement = 10, RULE_switchStatement = 11, RULE_returnStatement = 12, 
		RULE_lValueSet = 13, RULE_runtimeSet = 14, RULE_ifStatement = 15, RULE_elseStatement = 16, 
		RULE_scope = 17, RULE_identifierExpression = 18, RULE_baseExpression = 19, 
		RULE_constants = 20, RULE_cast = 21, RULE_unaryExpression = 22, RULE_signExtend = 23, 
		RULE_parenthesis = 24, RULE_genericImpl = 25, RULE_functionCall = 26, 
		RULE_vectorZero = 27, RULE_expression = 28, RULE_fixedLengthInstructionOperand = 29, 
		RULE_fixedLengthInstructionOperands = 30, RULE_fixedLengthInstruction = 31, 
		RULE_instructionDeclaration = 32, RULE_functionParameter = 33, RULE_functionParameters = 34, 
		RULE_functionBody = 35, RULE_variableType = 36, RULE_functionDeclaration = 37, 
		RULE_identifier = 38, RULE_trueFalse = 39, RULE_number = 40, RULE_runtimeOperandType = 41, 
		RULE_compileTimeIntegerType = 42, RULE_runtimeTypeCase = 43, RULE_runtimeTypeSwitch = 44, 
		RULE_runtimeTypeReference = 45, RULE_operandTypeDeclaration = 46, RULE_undefinedVariableDeclaration = 47, 
		RULE_definedVariableDeclaration = 48, RULE_variableDeclaration = 49;
	public static readonly string[] ruleNames = {
		"sourceFile", "topLevelDeclarations", "elementInsert", "elementExtract", 
		"line", "hostMemoryRead", "hostMemoryWrite", "semiColin", "functionCallLine", 
		"caseStatement", "loopStatement", "switchStatement", "returnStatement", 
		"lValueSet", "runtimeSet", "ifStatement", "elseStatement", "scope", "identifierExpression", 
		"baseExpression", "constants", "cast", "unaryExpression", "signExtend", 
		"parenthesis", "genericImpl", "functionCall", "vectorZero", "expression", 
		"fixedLengthInstructionOperand", "fixedLengthInstructionOperands", "fixedLengthInstruction", 
		"instructionDeclaration", "functionParameter", "functionParameters", "functionBody", 
		"variableType", "functionDeclaration", "identifier", "trueFalse", "number", 
		"runtimeOperandType", "compileTimeIntegerType", "runtimeTypeCase", "runtimeTypeSwitch", 
		"runtimeTypeReference", "operandTypeDeclaration", "undefinedVariableDeclaration", 
		"definedVariableDeclaration", "variableDeclaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'elm'", "'physical_read'", "'physical_write'", "';'", "'case'", 
		"':'", "'loop'", "'switch'", "'{'", "'}'", "'return'", "'='", "'set'", 
		"'if'", "'else'", "'UINT8_MIN'", "'INT8_MIN'", "'UINT16_MIN'", "'INT16_MIN'", 
		"'UINT32_MIN'", "'INT32_MIN'", "'UINT64_MIN'", "'INT64_MIN'", "'UINT8_MAX'", 
		"'INT8_MAX'", "'UINT16_MAX'", "'INT16_MAX'", "'UINT32_MAX'", "'INT32_MAX'", 
		"'UINT64_MAX'", "'INT64_MAX'", "'('", "')'", "'-'", "'~'", "'!'", "'extend'", 
		"'<'", "','", "'>'", "'vector_zero'", "'*'", "'/'", "'sdiv'", "'umulh'", 
		"'smulh'", "'+'", "'<<'", "'>>'", "'sar'", "'ror'", "'clt'", "'cgt'", 
		"'clte'", "'cgte'", "'<='", "'>='", "'=='", "'!='", "'&'", "'^'", "'|'", 
		"'&&'", "'||'", "'?'", "'fl_instruction'", "'external'", "'true'", "'false'", 
		"'o8'", "'o16'", "'o32'", "'o64'", "'o128'", "'i64'", "'integer'", "'int'", 
		"'void'", "'o_type'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "DECIMAL", "BINARY", "HEX", 
		"IDENTIFIER", "WHITE_SPACE", "LINE_COMMENT", "BLOB_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static languageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public languageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public languageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(languageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext[] topLevelDeclarations() {
			return GetRuleContexts<TopLevelDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext topLevelDeclarations(int i) {
			return GetRuleContext<TopLevelDeclarationsContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 139249L) != 0)) {
				{
				{
				State = 100;
				topLevelDeclarations();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 106;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionDeclarationContext instructionDeclaration() {
			return GetRuleContext<InstructionDeclarationContext>(0);
		}
		public TopLevelDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclarations; } }
	}

	[RuleVersion(0)]
	public TopLevelDeclarationsContext topLevelDeclarations() {
		TopLevelDeclarationsContext _localctx = new TopLevelDeclarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelDeclarations);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				functionDeclaration();
				}
				break;
			case T__65:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				instructionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementInsertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ElementInsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementInsert; } }
	}

	[RuleVersion(0)]
	public ElementInsertContext elementInsert() {
		ElementInsertContext _localctx = new ElementInsertContext(Context, State);
		EnterRule(_localctx, 4, RULE_elementInsert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__0);
			State = 113;
			expression(0);
			State = 114;
			expression(0);
			State = 115;
			expression(0);
			State = 116;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementExtractContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ElementExtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementExtract; } }
	}

	[RuleVersion(0)]
	public ElementExtractContext elementExtract() {
		ElementExtractContext _localctx = new ElementExtractContext(Context, State);
		EnterRule(_localctx, 6, RULE_elementExtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__0);
			State = 119;
			expression(0);
			State = 120;
			expression(0);
			State = 121;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandTypeDeclarationContext operandTypeDeclaration() {
			return GetRuleContext<OperandTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueSetContext lValueSet() {
			return GetRuleContext<LValueSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeSetContext runtimeSet() {
			return GetRuleContext<RuntimeSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallLineContext functionCallLine() {
			return GetRuleContext<FunctionCallLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostMemoryWriteContext hostMemoryWrite() {
			return GetRuleContext<HostMemoryWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiColinContext semiColin() {
			return GetRuleContext<SemiColinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementInsertContext elementInsert() {
			return GetRuleContext<ElementInsertContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 8, RULE_line);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				scope();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				operandTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 126;
				returnStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 127;
				lValueSet();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 128;
				runtimeSet();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 129;
				ifStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 130;
				functionCallLine();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 131;
				switchStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 132;
				loopStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 133;
				hostMemoryWrite();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 134;
				semiColin();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 135;
				elementInsert();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostMemoryReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HostMemoryReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostMemoryRead; } }
	}

	[RuleVersion(0)]
	public HostMemoryReadContext hostMemoryRead() {
		HostMemoryReadContext _localctx = new HostMemoryReadContext(Context, State);
		EnterRule(_localctx, 10, RULE_hostMemoryRead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(T__1);
			State = 139;
			variableType();
			State = 140;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostMemoryWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HostMemoryWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostMemoryWrite; } }
	}

	[RuleVersion(0)]
	public HostMemoryWriteContext hostMemoryWrite() {
		HostMemoryWriteContext _localctx = new HostMemoryWriteContext(Context, State);
		EnterRule(_localctx, 12, RULE_hostMemoryWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__2);
			State = 143;
			expression(0);
			State = 144;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiColinContext : ParserRuleContext {
		public SemiColinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semiColin; } }
	}

	[RuleVersion(0)]
	public SemiColinContext semiColin() {
		SemiColinContext _localctx = new SemiColinContext(Context, State);
		EnterRule(_localctx, 14, RULE_semiColin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallLine; } }
	}

	[RuleVersion(0)]
	public FunctionCallLineContext functionCallLine() {
		FunctionCallLineContext _localctx = new FunctionCallLineContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCallLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__4);
			State = 151;
			expression(0);
			State = 152;
			Match(T__5);
			State = 153;
			line();
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 154;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(T__6);
			State = 158;
			expression(0);
			State = 159;
			identifier();
			State = 160;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T__7);
			State = 163;
			expression(0);
			State = 164;
			Match(T__8);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 165;
				caseStatement();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(T__10);
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 174;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LValueSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueSet; } }
	}

	[RuleVersion(0)]
	public LValueSetContext lValueSet() {
		LValueSetContext _localctx = new LValueSetContext(Context, State);
		EnterRule(_localctx, 26, RULE_lValueSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			identifier();
			State = 178;
			Match(T__11);
			State = 179;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RuntimeSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeSet; } }
	}

	[RuleVersion(0)]
	public RuntimeSetContext runtimeSet() {
		RuntimeSetContext _localctx = new RuntimeSetContext(Context, State);
		EnterRule(_localctx, 28, RULE_runtimeSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__12);
			State = 182;
			identifier();
			State = 183;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(T__13);
			State = 186;
			parenthesis();
			State = 187;
			line();
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 188;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__14);
			State = 192;
			line();
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 193;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 34, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(T__8);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27546L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 9215L) != 0)) {
				{
				{
				State = 197;
				line();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierExpression; } }
	}

	[RuleVersion(0)]
	public IdentifierExpressionContext identifierExpression() {
		IdentifierExpressionContext _localctx = new IdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifierExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierExpressionContext identifierExpression() {
			return GetRuleContext<IdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueFalseContext trueFalse() {
			return GetRuleContext<TrueFalseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		public BaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseExpression; } }
	}

	[RuleVersion(0)]
	public BaseExpressionContext baseExpression() {
		BaseExpressionContext _localctx = new BaseExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_baseExpression);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				identifierExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				parenthesis();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 209;
				number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 210;
				trueFalse();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 211;
				cast();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 212;
				constants();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 40, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294901760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 42, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(T__31);
			State = 218;
			variableType();
			State = 219;
			Match(T__32);
			State = 220;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 120259084288L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 223;
			baseExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignExtendContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignExtendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signExtend; } }
	}

	[RuleVersion(0)]
	public SignExtendContext signExtend() {
		SignExtendContext _localctx = new SignExtendContext(Context, State);
		EnterRule(_localctx, 46, RULE_signExtend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(T__36);
			State = 226;
			variableType();
			State = 227;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis; } }
	}

	[RuleVersion(0)]
	public ParenthesisContext parenthesis() {
		ParenthesisContext _localctx = new ParenthesisContext(Context, State);
		EnterRule(_localctx, 48, RULE_parenthesis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(T__31);
			State = 230;
			expression(0);
			State = 231;
			Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public GenericImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericImpl; } }
	}

	[RuleVersion(0)]
	public GenericImplContext genericImpl() {
		GenericImplContext _localctx = new GenericImplContext(Context, State);
		EnterRule(_localctx, 50, RULE_genericImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(T__37);
			State = 234;
			identifier();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__38) {
				{
				{
				State = 235;
				Match(T__38);
				State = 236;
				identifier();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 242;
			Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			identifier();
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__37) {
				{
				State = 245;
				genericImpl();
				}
			}

			State = 248;
			Match(T__31);
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2465311162374L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 61443L) != 0)) {
				{
				State = 249;
				expression(0);
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__38) {
					{
					{
					State = 250;
					Match(T__38);
					State = 251;
					expression(0);
					}
					}
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 259;
			Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorZeroContext : ParserRuleContext {
		public VectorZeroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorZero; } }
	}

	[RuleVersion(0)]
	public VectorZeroContext vectorZero() {
		VectorZeroContext _localctx = new VectorZeroContext(Context, State);
		EnterRule(_localctx, 54, RULE_vectorZero);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostMemoryReadContext hostMemoryRead() {
			return GetRuleContext<HostMemoryReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignExtendContext signExtend() {
			return GetRuleContext<SignExtendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementExtractContext elementExtract() {
			return GetRuleContext<ElementExtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VectorZeroContext vectorZero() {
			return GetRuleContext<VectorZeroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 264;
				functionCall();
				}
				break;
			case 2:
				{
				State = 265;
				hostMemoryRead();
				}
				break;
			case 3:
				{
				State = 266;
				baseExpression();
				}
				break;
			case 4:
				{
				State = 267;
				unaryExpression();
				}
				break;
			case 5:
				{
				State = 268;
				signExtend();
				}
				break;
			case 6:
				{
				State = 269;
				elementExtract();
				}
				break;
			case 7:
				{
				State = 270;
				vectorZero();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 309;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 273;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 274;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 136339441844224L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 275;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 276;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 277;
						_la = TokenStream.LA(1);
						if ( !(_la==T__33 || _la==T__46) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 278;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 279;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 280;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4222124650659840L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 281;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 282;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 283;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 283728150913875968L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 284;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 285;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 286;
						_la = TokenStream.LA(1);
						if ( !(_la==T__57 || _la==T__58) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 287;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 288;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 289;
						Match(T__59);
						State = 290;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 291;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 292;
						Match(T__60);
						State = 293;
						expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 294;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 295;
						Match(T__61);
						State = 296;
						expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 297;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 298;
						Match(T__62);
						State = 299;
						expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 300;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 301;
						Match(T__63);
						State = 302;
						expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 303;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 304;
						Match(T__64);
						State = 305;
						expression(0);
						State = 306;
						Match(T__5);
						State = 307;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public FixedLengthInstructionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperand; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandContext fixedLengthInstructionOperand() {
		FixedLengthInstructionOperandContext _localctx = new FixedLengthInstructionOperandContext(Context, State);
		EnterRule(_localctx, 58, RULE_fixedLengthInstructionOperand);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				identifier();
				}
				break;
			case DECIMAL:
			case BINARY:
			case HEX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext[] fixedLengthInstructionOperand() {
			return GetRuleContexts<FixedLengthInstructionOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext fixedLengthInstructionOperand(int i) {
			return GetRuleContext<FixedLengthInstructionOperandContext>(i);
		}
		public FixedLengthInstructionOperandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperands; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
		FixedLengthInstructionOperandsContext _localctx = new FixedLengthInstructionOperandsContext(Context, State);
		EnterRule(_localctx, 60, RULE_fixedLengthInstructionOperands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(T__31);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 15L) != 0)) {
				{
				{
				State = 319;
				fixedLengthInstructionOperand();
				}
				}
				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 325;
			Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
			return GetRuleContext<FixedLengthInstructionOperandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FixedLengthInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstruction; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionContext fixedLengthInstruction() {
		FixedLengthInstructionContext _localctx = new FixedLengthInstructionContext(Context, State);
		EnterRule(_localctx, 62, RULE_fixedLengthInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			Match(T__65);
			State = 328;
			number();
			State = 329;
			identifier();
			State = 330;
			fixedLengthInstructionOperands();
			State = 331;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionContext fixedLengthInstruction() {
			return GetRuleContext<FixedLengthInstructionContext>(0);
		}
		public InstructionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionDeclaration; } }
	}

	[RuleVersion(0)]
	public InstructionDeclarationContext instructionDeclaration() {
		InstructionDeclarationContext _localctx = new InstructionDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_instructionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			fixedLengthInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 66, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			variableType();
			State = 336;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			functionParameter();
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__38) {
				{
				{
				State = 339;
				Match(T__38);
				State = 340;
				functionParameter();
				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_functionBody);
		try {
			State = 348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346;
				scope();
				}
				break;
			case T__66:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347;
				Match(T__66);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompileTimeIntegerTypeContext compileTimeIntegerType() {
			return GetRuleContext<CompileTimeIntegerTypeContext>(0);
		}
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 72, RULE_variableType);
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350;
				runtimeOperandType();
				}
				break;
			case T__74:
			case T__75:
			case T__76:
			case T__77:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351;
				compileTimeIntegerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			variableType();
			State = 355;
			identifier();
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__37) {
				{
				State = 356;
				genericImpl();
				}
			}

			State = 359;
			Match(T__31);
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 8703L) != 0)) {
				{
				State = 360;
				functionParameters();
				}
			}

			State = 363;
			Match(T__32);
			State = 364;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(languageParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 76, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueFalseContext : ParserRuleContext {
		public TrueFalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueFalse; } }
	}

	[RuleVersion(0)]
	public TrueFalseContext trueFalse() {
		TrueFalseContext _localctx = new TrueFalseContext(Context, State);
		EnterRule(_localctx, 78, RULE_trueFalse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			_la = TokenStream.LA(1);
			if ( !(_la==T__67 || _la==T__68) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(languageParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(languageParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(languageParser.HEX, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 80, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeOperandTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RuntimeOperandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeOperandType; } }
	}

	[RuleVersion(0)]
	public RuntimeOperandTypeContext runtimeOperandType() {
		RuntimeOperandTypeContext _localctx = new RuntimeOperandTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_runtimeOperandType);
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__69:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				Match(T__69);
				}
				break;
			case T__70:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				Match(T__70);
				}
				break;
			case T__71:
				EnterOuterAlt(_localctx, 3);
				{
				State = 374;
				Match(T__71);
				}
				break;
			case T__72:
				EnterOuterAlt(_localctx, 4);
				{
				State = 375;
				Match(T__72);
				}
				break;
			case T__73:
				EnterOuterAlt(_localctx, 5);
				{
				State = 376;
				Match(T__73);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 377;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileTimeIntegerTypeContext : ParserRuleContext {
		public CompileTimeIntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileTimeIntegerType; } }
	}

	[RuleVersion(0)]
	public CompileTimeIntegerTypeContext compileTimeIntegerType() {
		CompileTimeIntegerTypeContext _localctx = new CompileTimeIntegerTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_compileTimeIntegerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		public RuntimeTypeCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeCase; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeCaseContext runtimeTypeCase() {
		RuntimeTypeCaseContext _localctx = new RuntimeTypeCaseContext(Context, State);
		EnterRule(_localctx, 86, RULE_runtimeTypeCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(T__4);
			State = 383;
			expression(0);
			State = 384;
			Match(T__5);
			State = 385;
			runtimeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeSwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext[] runtimeTypeCase() {
			return GetRuleContexts<RuntimeTypeCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext runtimeTypeCase(int i) {
			return GetRuleContext<RuntimeTypeCaseContext>(i);
		}
		public RuntimeTypeSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeSwitch; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeSwitchContext runtimeTypeSwitch() {
		RuntimeTypeSwitchContext _localctx = new RuntimeTypeSwitchContext(Context, State);
		EnterRule(_localctx, 88, RULE_runtimeTypeSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(T__7);
			State = 388;
			expression(0);
			State = 389;
			Match(T__8);
			State = 390;
			runtimeTypeCase();
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__38) {
				{
				{
				State = 391;
				Match(T__38);
				State = 392;
				runtimeTypeCase();
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 398;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeSwitchContext runtimeTypeSwitch() {
			return GetRuleContext<RuntimeTypeSwitchContext>(0);
		}
		public RuntimeTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeReference; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeReferenceContext runtimeTypeReference() {
		RuntimeTypeReferenceContext _localctx = new RuntimeTypeReferenceContext(Context, State);
		EnterRule(_localctx, 90, RULE_runtimeTypeReference);
		try {
			State = 402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				runtimeOperandType();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				runtimeTypeSwitch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public OperandTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandTypeDeclaration; } }
	}

	[RuleVersion(0)]
	public OperandTypeDeclarationContext operandTypeDeclaration() {
		OperandTypeDeclarationContext _localctx = new OperandTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_operandTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			Match(T__78);
			State = 405;
			identifier();
			State = 406;
			Match(T__11);
			State = 407;
			runtimeTypeReference();
			State = 411;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 408;
					line();
					}
					} 
				}
				State = 413;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UndefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefinedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
		UndefinedVariableDeclarationContext _localctx = new UndefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 94, RULE_undefinedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			variableType();
			State = 415;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public DefinedVariableDeclarationContext definedVariableDeclaration() {
		DefinedVariableDeclarationContext _localctx = new DefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 96, RULE_definedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			variableType();
			State = 418;
			identifier();
			State = 419;
			Match(T__11);
			State = 420;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
			return GetRuleContext<UndefinedVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedVariableDeclarationContext definedVariableDeclaration() {
			return GetRuleContext<DefinedVariableDeclarationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 98, RULE_variableDeclaration);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				undefinedVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423;
				definedVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,86,427,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		1,0,5,0,102,8,0,10,0,12,0,105,9,0,1,0,1,0,1,1,1,1,3,1,111,8,1,1,2,1,2,
		1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,3,4,137,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,156,8,9,1,10,1,10,1,10,1,10,1,10,1,11,
		1,11,1,11,1,11,5,11,167,8,11,10,11,12,11,170,9,11,1,11,1,11,1,12,1,12,
		3,12,176,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
		15,3,15,190,8,15,1,16,1,16,1,16,3,16,195,8,16,1,17,1,17,5,17,199,8,17,
		10,17,12,17,202,9,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
		3,19,214,8,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,
		23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,238,8,25,10,
		25,12,25,241,9,25,1,25,1,25,1,26,1,26,3,26,247,8,26,1,26,1,26,1,26,1,26,
		5,26,253,8,26,10,26,12,26,256,9,26,3,26,258,8,26,1,26,1,26,1,27,1,27,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,272,8,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,5,28,310,8,28,10,28,12,28,313,9,28,1,29,1,29,3,29,
		317,8,29,1,30,1,30,5,30,321,8,30,10,30,12,30,324,9,30,1,30,1,30,1,31,1,
		31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,5,34,342,
		8,34,10,34,12,34,345,9,34,1,35,1,35,3,35,349,8,35,1,36,1,36,3,36,353,8,
		36,1,37,1,37,1,37,3,37,358,8,37,1,37,1,37,3,37,362,8,37,1,37,1,37,1,37,
		1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,379,8,
		41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,5,
		44,394,8,44,10,44,12,44,397,9,44,1,44,1,44,1,45,1,45,3,45,403,8,45,1,46,
		1,46,1,46,1,46,1,46,5,46,410,8,46,10,46,12,46,413,9,46,1,47,1,47,1,47,
		1,48,1,48,1,48,1,48,1,48,1,49,1,49,3,49,425,8,49,1,49,0,1,56,50,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,0,
		10,1,0,16,31,1,0,34,36,1,0,42,46,2,0,34,34,47,47,1,0,48,51,3,0,38,38,40,
		40,52,57,1,0,58,59,1,0,68,69,1,0,80,82,1,0,75,78,438,0,103,1,0,0,0,2,110,
		1,0,0,0,4,112,1,0,0,0,6,118,1,0,0,0,8,136,1,0,0,0,10,138,1,0,0,0,12,142,
		1,0,0,0,14,146,1,0,0,0,16,148,1,0,0,0,18,150,1,0,0,0,20,157,1,0,0,0,22,
		162,1,0,0,0,24,173,1,0,0,0,26,177,1,0,0,0,28,181,1,0,0,0,30,185,1,0,0,
		0,32,191,1,0,0,0,34,196,1,0,0,0,36,205,1,0,0,0,38,213,1,0,0,0,40,215,1,
		0,0,0,42,217,1,0,0,0,44,222,1,0,0,0,46,225,1,0,0,0,48,229,1,0,0,0,50,233,
		1,0,0,0,52,244,1,0,0,0,54,261,1,0,0,0,56,271,1,0,0,0,58,316,1,0,0,0,60,
		318,1,0,0,0,62,327,1,0,0,0,64,333,1,0,0,0,66,335,1,0,0,0,68,338,1,0,0,
		0,70,348,1,0,0,0,72,352,1,0,0,0,74,354,1,0,0,0,76,366,1,0,0,0,78,368,1,
		0,0,0,80,370,1,0,0,0,82,378,1,0,0,0,84,380,1,0,0,0,86,382,1,0,0,0,88,387,
		1,0,0,0,90,402,1,0,0,0,92,404,1,0,0,0,94,414,1,0,0,0,96,417,1,0,0,0,98,
		424,1,0,0,0,100,102,3,2,1,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,
		0,0,0,103,104,1,0,0,0,104,106,1,0,0,0,105,103,1,0,0,0,106,107,5,0,0,1,
		107,1,1,0,0,0,108,111,3,74,37,0,109,111,3,64,32,0,110,108,1,0,0,0,110,
		109,1,0,0,0,111,3,1,0,0,0,112,113,5,1,0,0,113,114,3,56,28,0,114,115,3,
		56,28,0,115,116,3,56,28,0,116,117,3,56,28,0,117,5,1,0,0,0,118,119,5,1,
		0,0,119,120,3,56,28,0,120,121,3,56,28,0,121,122,3,56,28,0,122,7,1,0,0,
		0,123,137,3,34,17,0,124,137,3,92,46,0,125,137,3,98,49,0,126,137,3,24,12,
		0,127,137,3,26,13,0,128,137,3,28,14,0,129,137,3,30,15,0,130,137,3,16,8,
		0,131,137,3,22,11,0,132,137,3,20,10,0,133,137,3,12,6,0,134,137,3,14,7,
		0,135,137,3,4,2,0,136,123,1,0,0,0,136,124,1,0,0,0,136,125,1,0,0,0,136,
		126,1,0,0,0,136,127,1,0,0,0,136,128,1,0,0,0,136,129,1,0,0,0,136,130,1,
		0,0,0,136,131,1,0,0,0,136,132,1,0,0,0,136,133,1,0,0,0,136,134,1,0,0,0,
		136,135,1,0,0,0,137,9,1,0,0,0,138,139,5,2,0,0,139,140,3,72,36,0,140,141,
		3,56,28,0,141,11,1,0,0,0,142,143,5,3,0,0,143,144,3,56,28,0,144,145,3,56,
		28,0,145,13,1,0,0,0,146,147,5,4,0,0,147,15,1,0,0,0,148,149,3,52,26,0,149,
		17,1,0,0,0,150,151,5,5,0,0,151,152,3,56,28,0,152,153,5,6,0,0,153,155,3,
		8,4,0,154,156,5,4,0,0,155,154,1,0,0,0,155,156,1,0,0,0,156,19,1,0,0,0,157,
		158,5,7,0,0,158,159,3,56,28,0,159,160,3,76,38,0,160,161,3,34,17,0,161,
		21,1,0,0,0,162,163,5,8,0,0,163,164,3,56,28,0,164,168,5,9,0,0,165,167,3,
		18,9,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,
		169,171,1,0,0,0,170,168,1,0,0,0,171,172,5,10,0,0,172,23,1,0,0,0,173,175,
		5,11,0,0,174,176,3,56,28,0,175,174,1,0,0,0,175,176,1,0,0,0,176,25,1,0,
		0,0,177,178,3,76,38,0,178,179,5,12,0,0,179,180,3,56,28,0,180,27,1,0,0,
		0,181,182,5,13,0,0,182,183,3,76,38,0,183,184,3,56,28,0,184,29,1,0,0,0,
		185,186,5,14,0,0,186,187,3,48,24,0,187,189,3,8,4,0,188,190,3,32,16,0,189,
		188,1,0,0,0,189,190,1,0,0,0,190,31,1,0,0,0,191,192,5,15,0,0,192,194,3,
		8,4,0,193,195,3,32,16,0,194,193,1,0,0,0,194,195,1,0,0,0,195,33,1,0,0,0,
		196,200,5,9,0,0,197,199,3,8,4,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,
		1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,5,10,0,
		0,204,35,1,0,0,0,205,206,3,76,38,0,206,37,1,0,0,0,207,214,3,36,18,0,208,
		214,3,48,24,0,209,214,3,80,40,0,210,214,3,78,39,0,211,214,3,42,21,0,212,
		214,3,40,20,0,213,207,1,0,0,0,213,208,1,0,0,0,213,209,1,0,0,0,213,210,
		1,0,0,0,213,211,1,0,0,0,213,212,1,0,0,0,214,39,1,0,0,0,215,216,7,0,0,0,
		216,41,1,0,0,0,217,218,5,32,0,0,218,219,3,72,36,0,219,220,5,33,0,0,220,
		221,3,56,28,0,221,43,1,0,0,0,222,223,7,1,0,0,223,224,3,38,19,0,224,45,
		1,0,0,0,225,226,5,37,0,0,226,227,3,72,36,0,227,228,3,56,28,0,228,47,1,
		0,0,0,229,230,5,32,0,0,230,231,3,56,28,0,231,232,5,33,0,0,232,49,1,0,0,
		0,233,234,5,38,0,0,234,239,3,76,38,0,235,236,5,39,0,0,236,238,3,76,38,
		0,237,235,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,
		242,1,0,0,0,241,239,1,0,0,0,242,243,5,40,0,0,243,51,1,0,0,0,244,246,3,
		76,38,0,245,247,3,50,25,0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,1,0,
		0,0,248,257,5,32,0,0,249,254,3,56,28,0,250,251,5,39,0,0,251,253,3,56,28,
		0,252,250,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,
		258,1,0,0,0,256,254,1,0,0,0,257,249,1,0,0,0,257,258,1,0,0,0,258,259,1,
		0,0,0,259,260,5,33,0,0,260,53,1,0,0,0,261,262,5,41,0,0,262,55,1,0,0,0,
		263,264,6,28,-1,0,264,272,3,52,26,0,265,272,3,10,5,0,266,272,3,38,19,0,
		267,272,3,44,22,0,268,272,3,46,23,0,269,272,3,6,3,0,270,272,3,54,27,0,
		271,263,1,0,0,0,271,265,1,0,0,0,271,266,1,0,0,0,271,267,1,0,0,0,271,268,
		1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,311,1,0,0,0,273,274,10,11,
		0,0,274,275,7,2,0,0,275,310,3,56,28,12,276,277,10,10,0,0,277,278,7,3,0,
		0,278,310,3,56,28,11,279,280,10,9,0,0,280,281,7,4,0,0,281,310,3,56,28,
		10,282,283,10,8,0,0,283,284,7,5,0,0,284,310,3,56,28,9,285,286,10,7,0,0,
		286,287,7,6,0,0,287,310,3,56,28,8,288,289,10,6,0,0,289,290,5,60,0,0,290,
		310,3,56,28,7,291,292,10,5,0,0,292,293,5,61,0,0,293,310,3,56,28,6,294,
		295,10,4,0,0,295,296,5,62,0,0,296,310,3,56,28,5,297,298,10,3,0,0,298,299,
		5,63,0,0,299,310,3,56,28,4,300,301,10,2,0,0,301,302,5,64,0,0,302,310,3,
		56,28,3,303,304,10,1,0,0,304,305,5,65,0,0,305,306,3,56,28,0,306,307,5,
		6,0,0,307,308,3,56,28,2,308,310,1,0,0,0,309,273,1,0,0,0,309,276,1,0,0,
		0,309,279,1,0,0,0,309,282,1,0,0,0,309,285,1,0,0,0,309,288,1,0,0,0,309,
		291,1,0,0,0,309,294,1,0,0,0,309,297,1,0,0,0,309,300,1,0,0,0,309,303,1,
		0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,57,1,0,0,0,313,
		311,1,0,0,0,314,317,3,76,38,0,315,317,3,80,40,0,316,314,1,0,0,0,316,315,
		1,0,0,0,317,59,1,0,0,0,318,322,5,32,0,0,319,321,3,58,29,0,320,319,1,0,
		0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,
		322,1,0,0,0,325,326,5,33,0,0,326,61,1,0,0,0,327,328,5,66,0,0,328,329,3,
		80,40,0,329,330,3,76,38,0,330,331,3,60,30,0,331,332,3,34,17,0,332,63,1,
		0,0,0,333,334,3,62,31,0,334,65,1,0,0,0,335,336,3,72,36,0,336,337,3,76,
		38,0,337,67,1,0,0,0,338,343,3,66,33,0,339,340,5,39,0,0,340,342,3,66,33,
		0,341,339,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,
		69,1,0,0,0,345,343,1,0,0,0,346,349,3,34,17,0,347,349,5,67,0,0,348,346,
		1,0,0,0,348,347,1,0,0,0,349,71,1,0,0,0,350,353,3,82,41,0,351,353,3,84,
		42,0,352,350,1,0,0,0,352,351,1,0,0,0,353,73,1,0,0,0,354,355,3,72,36,0,
		355,357,3,76,38,0,356,358,3,50,25,0,357,356,1,0,0,0,357,358,1,0,0,0,358,
		359,1,0,0,0,359,361,5,32,0,0,360,362,3,68,34,0,361,360,1,0,0,0,361,362,
		1,0,0,0,362,363,1,0,0,0,363,364,5,33,0,0,364,365,3,70,35,0,365,75,1,0,
		0,0,366,367,5,83,0,0,367,77,1,0,0,0,368,369,7,7,0,0,369,79,1,0,0,0,370,
		371,7,8,0,0,371,81,1,0,0,0,372,379,5,70,0,0,373,379,5,71,0,0,374,379,5,
		72,0,0,375,379,5,73,0,0,376,379,5,74,0,0,377,379,3,76,38,0,378,372,1,0,
		0,0,378,373,1,0,0,0,378,374,1,0,0,0,378,375,1,0,0,0,378,376,1,0,0,0,378,
		377,1,0,0,0,379,83,1,0,0,0,380,381,7,9,0,0,381,85,1,0,0,0,382,383,5,5,
		0,0,383,384,3,56,28,0,384,385,5,6,0,0,385,386,3,90,45,0,386,87,1,0,0,0,
		387,388,5,8,0,0,388,389,3,56,28,0,389,390,5,9,0,0,390,395,3,86,43,0,391,
		392,5,39,0,0,392,394,3,86,43,0,393,391,1,0,0,0,394,397,1,0,0,0,395,393,
		1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,0,398,399,5,10,0,
		0,399,89,1,0,0,0,400,403,3,82,41,0,401,403,3,88,44,0,402,400,1,0,0,0,402,
		401,1,0,0,0,403,91,1,0,0,0,404,405,5,79,0,0,405,406,3,76,38,0,406,407,
		5,12,0,0,407,411,3,90,45,0,408,410,3,8,4,0,409,408,1,0,0,0,410,413,1,0,
		0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,93,1,0,0,0,413,411,1,0,0,0,414,
		415,3,72,36,0,415,416,3,76,38,0,416,95,1,0,0,0,417,418,3,72,36,0,418,419,
		3,76,38,0,419,420,5,12,0,0,420,421,3,56,28,0,421,97,1,0,0,0,422,425,3,
		94,47,0,423,425,3,96,48,0,424,422,1,0,0,0,424,423,1,0,0,0,425,99,1,0,0,
		0,29,103,110,136,155,168,175,189,194,200,213,239,246,254,257,271,309,311,
		316,322,343,348,352,357,361,378,395,402,411,424
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
