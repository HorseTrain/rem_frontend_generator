//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/linvirt/code/rem_frontend_generator/parser/language.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class languageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, DECIMAL=78, BINARY=79, HEX=80, 
		IDENTIFIER=81, WHITE_SPACE=82, LINE_COMMENT=83, BLOB_COMMENT=84;
	public const int
		RULE_sourceFile = 0, RULE_topLevelDeclarations = 1, RULE_line = 2, RULE_hostMemoryRead = 3, 
		RULE_hostMemoryWrite = 4, RULE_semiColin = 5, RULE_functionCallLine = 6, 
		RULE_caseStatement = 7, RULE_loopStatement = 8, RULE_switchStatement = 9, 
		RULE_returnStatement = 10, RULE_lValueSet = 11, RULE_runtimeSet = 12, 
		RULE_ifStatement = 13, RULE_elseStatement = 14, RULE_scope = 15, RULE_identifierExpression = 16, 
		RULE_baseExpression = 17, RULE_constants = 18, RULE_cast = 19, RULE_unaryExpression = 20, 
		RULE_signExtend = 21, RULE_parenthesis = 22, RULE_genericImpl = 23, RULE_functionCall = 24, 
		RULE_expression = 25, RULE_fixedLengthInstructionOperand = 26, RULE_fixedLengthInstructionOperands = 27, 
		RULE_fixedLengthInstruction = 28, RULE_instructionDeclaration = 29, RULE_functionParameter = 30, 
		RULE_functionParameters = 31, RULE_functionBody = 32, RULE_variableType = 33, 
		RULE_functionDeclaration = 34, RULE_identifier = 35, RULE_trueFalse = 36, 
		RULE_number = 37, RULE_runtimeOperandType = 38, RULE_compileTimeIntegerType = 39, 
		RULE_runtimeTypeCase = 40, RULE_runtimeTypeSwitch = 41, RULE_runtimeTypeReference = 42, 
		RULE_operandTypeDeclaration = 43, RULE_undefinedVariableDeclaration = 44, 
		RULE_definedVariableDeclaration = 45, RULE_variableDeclaration = 46;
	public static readonly string[] ruleNames = {
		"sourceFile", "topLevelDeclarations", "line", "hostMemoryRead", "hostMemoryWrite", 
		"semiColin", "functionCallLine", "caseStatement", "loopStatement", "switchStatement", 
		"returnStatement", "lValueSet", "runtimeSet", "ifStatement", "elseStatement", 
		"scope", "identifierExpression", "baseExpression", "constants", "cast", 
		"unaryExpression", "signExtend", "parenthesis", "genericImpl", "functionCall", 
		"expression", "fixedLengthInstructionOperand", "fixedLengthInstructionOperands", 
		"fixedLengthInstruction", "instructionDeclaration", "functionParameter", 
		"functionParameters", "functionBody", "variableType", "functionDeclaration", 
		"identifier", "trueFalse", "number", "runtimeOperandType", "compileTimeIntegerType", 
		"runtimeTypeCase", "runtimeTypeSwitch", "runtimeTypeReference", "operandTypeDeclaration", 
		"undefinedVariableDeclaration", "definedVariableDeclaration", "variableDeclaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'physical_read'", "'physical_write'", "';'", "'case'", "':'", "'loop'", 
		"'switch'", "'{'", "'}'", "'return'", "'='", "'set'", "'if'", "'else'", 
		"'UINT8_MIN'", "'INT8_MIN'", "'UINT16_MIN'", "'INT16_MIN'", "'UINT32_MIN'", 
		"'INT32_MIN'", "'UINT64_MIN'", "'INT64_MIN'", "'UINT8_MAX'", "'INT8_MAX'", 
		"'UINT16_MAX'", "'INT16_MAX'", "'UINT32_MAX'", "'INT32_MAX'", "'UINT64_MAX'", 
		"'INT64_MAX'", "'('", "')'", "'-'", "'~'", "'!'", "'extend'", "'<'", "','", 
		"'>'", "'*'", "'/'", "'sdiv'", "'umulh'", "'smulh'", "'+'", "'<<'", "'>>'", 
		"'sar'", "'ror'", "'clt'", "'cgt'", "'clte'", "'cgte'", "'<='", "'>='", 
		"'=='", "'!='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'?'", "'fl_instruction'", 
		"'external'", "'true'", "'false'", "'o8'", "'o16'", "'o32'", "'o64'", 
		"'o128'", "'i64'", "'integer'", "'int'", "'void'", "'o_type'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "DECIMAL", "BINARY", "HEX", "IDENTIFIER", 
		"WHITE_SPACE", "LINE_COMMENT", "BLOB_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static languageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public languageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public languageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(languageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext[] topLevelDeclarations() {
			return GetRuleContexts<TopLevelDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext topLevelDeclarations(int i) {
			return GetRuleContext<TopLevelDeclarationsContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 139249L) != 0)) {
				{
				{
				State = 94;
				topLevelDeclarations();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 100;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionDeclarationContext instructionDeclaration() {
			return GetRuleContext<InstructionDeclarationContext>(0);
		}
		public TopLevelDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclarations; } }
	}

	[RuleVersion(0)]
	public TopLevelDeclarationsContext topLevelDeclarations() {
		TopLevelDeclarationsContext _localctx = new TopLevelDeclarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelDeclarations);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				functionDeclaration();
				}
				break;
			case T__63:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				instructionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandTypeDeclarationContext operandTypeDeclaration() {
			return GetRuleContext<OperandTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueSetContext lValueSet() {
			return GetRuleContext<LValueSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeSetContext runtimeSet() {
			return GetRuleContext<RuntimeSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallLineContext functionCallLine() {
			return GetRuleContext<FunctionCallLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostMemoryWriteContext hostMemoryWrite() {
			return GetRuleContext<HostMemoryWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiColinContext semiColin() {
			return GetRuleContext<SemiColinContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 4, RULE_line);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				scope();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				operandTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 108;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 109;
				returnStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 110;
				lValueSet();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 111;
				runtimeSet();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 112;
				ifStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 113;
				functionCallLine();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 114;
				switchStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 115;
				loopStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 116;
				hostMemoryWrite();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 117;
				semiColin();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostMemoryReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HostMemoryReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostMemoryRead; } }
	}

	[RuleVersion(0)]
	public HostMemoryReadContext hostMemoryRead() {
		HostMemoryReadContext _localctx = new HostMemoryReadContext(Context, State);
		EnterRule(_localctx, 6, RULE_hostMemoryRead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__0);
			State = 121;
			variableType();
			State = 122;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostMemoryWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HostMemoryWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostMemoryWrite; } }
	}

	[RuleVersion(0)]
	public HostMemoryWriteContext hostMemoryWrite() {
		HostMemoryWriteContext _localctx = new HostMemoryWriteContext(Context, State);
		EnterRule(_localctx, 8, RULE_hostMemoryWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(T__1);
			State = 125;
			expression(0);
			State = 126;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiColinContext : ParserRuleContext {
		public SemiColinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semiColin; } }
	}

	[RuleVersion(0)]
	public SemiColinContext semiColin() {
		SemiColinContext _localctx = new SemiColinContext(Context, State);
		EnterRule(_localctx, 10, RULE_semiColin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallLine; } }
	}

	[RuleVersion(0)]
	public FunctionCallLineContext functionCallLine() {
		FunctionCallLineContext _localctx = new FunctionCallLineContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCallLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__3);
			State = 133;
			expression(0);
			State = 134;
			Match(T__4);
			State = 135;
			line();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 136;
				Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(T__5);
			State = 140;
			expression(0);
			State = 141;
			identifier();
			State = 142;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__6);
			State = 145;
			expression(0);
			State = 146;
			Match(T__7);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 147;
				caseStatement();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(T__9);
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 156;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LValueSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueSet; } }
	}

	[RuleVersion(0)]
	public LValueSetContext lValueSet() {
		LValueSetContext _localctx = new LValueSetContext(Context, State);
		EnterRule(_localctx, 22, RULE_lValueSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			identifier();
			State = 160;
			Match(T__10);
			State = 161;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RuntimeSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeSet; } }
	}

	[RuleVersion(0)]
	public RuntimeSetContext runtimeSet() {
		RuntimeSetContext _localctx = new RuntimeSetContext(Context, State);
		EnterRule(_localctx, 24, RULE_runtimeSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(T__11);
			State = 164;
			identifier();
			State = 165;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(T__12);
			State = 168;
			parenthesis();
			State = 169;
			line();
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 170;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(T__13);
			State = 174;
			line();
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 175;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 30, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(T__7);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13772L) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 9215L) != 0)) {
				{
				{
				State = 179;
				line();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 185;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierExpression; } }
	}

	[RuleVersion(0)]
	public IdentifierExpressionContext identifierExpression() {
		IdentifierExpressionContext _localctx = new IdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_identifierExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierExpressionContext identifierExpression() {
			return GetRuleContext<IdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueFalseContext trueFalse() {
			return GetRuleContext<TrueFalseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		public BaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseExpression; } }
	}

	[RuleVersion(0)]
	public BaseExpressionContext baseExpression() {
		BaseExpressionContext _localctx = new BaseExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_baseExpression);
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 189;
				identifierExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190;
				parenthesis();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191;
				number();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192;
				trueFalse();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 193;
				cast();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 194;
				constants();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 36, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2147450880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 38, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(T__30);
			State = 200;
			variableType();
			State = 201;
			Match(T__31);
			State = 202;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 205;
			baseExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignExtendContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignExtendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signExtend; } }
	}

	[RuleVersion(0)]
	public SignExtendContext signExtend() {
		SignExtendContext _localctx = new SignExtendContext(Context, State);
		EnterRule(_localctx, 42, RULE_signExtend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(T__35);
			State = 208;
			variableType();
			State = 209;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis; } }
	}

	[RuleVersion(0)]
	public ParenthesisContext parenthesis() {
		ParenthesisContext _localctx = new ParenthesisContext(Context, State);
		EnterRule(_localctx, 44, RULE_parenthesis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(T__30);
			State = 212;
			expression(0);
			State = 213;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public GenericImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericImpl; } }
	}

	[RuleVersion(0)]
	public GenericImplContext genericImpl() {
		GenericImplContext _localctx = new GenericImplContext(Context, State);
		EnterRule(_localctx, 46, RULE_genericImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(T__36);
			State = 216;
			identifier();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__37) {
				{
				{
				State = 217;
				Match(T__37);
				State = 218;
				identifier();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 224;
			Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 48, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			identifier();
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__36) {
				{
				State = 227;
				genericImpl();
				}
			}

			State = 230;
			Match(T__30);
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 133143953410L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 61443L) != 0)) {
				{
				State = 231;
				expression(0);
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__37) {
					{
					{
					State = 232;
					Match(T__37);
					State = 233;
					expression(0);
					}
					}
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 241;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostMemoryReadContext hostMemoryRead() {
			return GetRuleContext<HostMemoryReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignExtendContext signExtend() {
			return GetRuleContext<SignExtendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 244;
				functionCall();
				}
				break;
			case 2:
				{
				State = 245;
				hostMemoryRead();
				}
				break;
			case 3:
				{
				State = 246;
				baseExpression();
				}
				break;
			case 4:
				{
				State = 247;
				unaryExpression();
				}
				break;
			case 5:
				{
				State = 248;
				signExtend();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 289;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 287;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 251;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 252;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34084860461056L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 253;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 254;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 255;
						_la = TokenStream.LA(1);
						if ( !(_la==T__32 || _la==T__44) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 256;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 257;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 258;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055531162664960L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 259;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 260;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 261;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 70932381325852672L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 262;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 263;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 264;
						_la = TokenStream.LA(1);
						if ( !(_la==T__55 || _la==T__56) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 265;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 266;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 267;
						Match(T__57);
						State = 268;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 269;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 270;
						Match(T__58);
						State = 271;
						expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 272;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 273;
						Match(T__59);
						State = 274;
						expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 275;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 276;
						Match(T__60);
						State = 277;
						expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 278;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 279;
						Match(T__61);
						State = 280;
						expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 281;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 282;
						Match(T__62);
						State = 283;
						expression(0);
						State = 284;
						Match(T__4);
						State = 285;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public FixedLengthInstructionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperand; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandContext fixedLengthInstructionOperand() {
		FixedLengthInstructionOperandContext _localctx = new FixedLengthInstructionOperandContext(Context, State);
		EnterRule(_localctx, 52, RULE_fixedLengthInstructionOperand);
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				identifier();
				}
				break;
			case DECIMAL:
			case BINARY:
			case HEX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext[] fixedLengthInstructionOperand() {
			return GetRuleContexts<FixedLengthInstructionOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext fixedLengthInstructionOperand(int i) {
			return GetRuleContext<FixedLengthInstructionOperandContext>(i);
		}
		public FixedLengthInstructionOperandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperands; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
		FixedLengthInstructionOperandsContext _localctx = new FixedLengthInstructionOperandsContext(Context, State);
		EnterRule(_localctx, 54, RULE_fixedLengthInstructionOperands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(T__30);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 15L) != 0)) {
				{
				{
				State = 297;
				fixedLengthInstructionOperand();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 303;
			Match(T__31);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
			return GetRuleContext<FixedLengthInstructionOperandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FixedLengthInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstruction; } }
	}

	[RuleVersion(0)]
	public FixedLengthInstructionContext fixedLengthInstruction() {
		FixedLengthInstructionContext _localctx = new FixedLengthInstructionContext(Context, State);
		EnterRule(_localctx, 56, RULE_fixedLengthInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(T__63);
			State = 306;
			number();
			State = 307;
			identifier();
			State = 308;
			fixedLengthInstructionOperands();
			State = 309;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionContext fixedLengthInstruction() {
			return GetRuleContext<FixedLengthInstructionContext>(0);
		}
		public InstructionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionDeclaration; } }
	}

	[RuleVersion(0)]
	public InstructionDeclarationContext instructionDeclaration() {
		InstructionDeclarationContext _localctx = new InstructionDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_instructionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			fixedLengthInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			variableType();
			State = 314;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			functionParameter();
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__37) {
				{
				{
				State = 317;
				Match(T__37);
				State = 318;
				functionParameter();
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_functionBody);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324;
				scope();
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325;
				Match(T__64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompileTimeIntegerTypeContext compileTimeIntegerType() {
			return GetRuleContext<CompileTimeIntegerTypeContext>(0);
		}
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_variableType);
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				runtimeOperandType();
				}
				break;
			case T__72:
			case T__73:
			case T__74:
			case T__75:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329;
				compileTimeIntegerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			variableType();
			State = 333;
			identifier();
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__36) {
				{
				State = 334;
				genericImpl();
				}
			}

			State = 337;
			Match(T__30);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 8703L) != 0)) {
				{
				State = 338;
				functionParameters();
				}
			}

			State = 341;
			Match(T__31);
			State = 342;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(languageParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueFalseContext : ParserRuleContext {
		public TrueFalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueFalse; } }
	}

	[RuleVersion(0)]
	public TrueFalseContext trueFalse() {
		TrueFalseContext _localctx = new TrueFalseContext(Context, State);
		EnterRule(_localctx, 72, RULE_trueFalse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_la = TokenStream.LA(1);
			if ( !(_la==T__65 || _la==T__66) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(languageParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(languageParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(languageParser.HEX, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 74, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeOperandTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RuntimeOperandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeOperandType; } }
	}

	[RuleVersion(0)]
	public RuntimeOperandTypeContext runtimeOperandType() {
		RuntimeOperandTypeContext _localctx = new RuntimeOperandTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_runtimeOperandType);
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__67:
				EnterOuterAlt(_localctx, 1);
				{
				State = 350;
				Match(T__67);
				}
				break;
			case T__68:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351;
				Match(T__68);
				}
				break;
			case T__69:
				EnterOuterAlt(_localctx, 3);
				{
				State = 352;
				Match(T__69);
				}
				break;
			case T__70:
				EnterOuterAlt(_localctx, 4);
				{
				State = 353;
				Match(T__70);
				}
				break;
			case T__71:
				EnterOuterAlt(_localctx, 5);
				{
				State = 354;
				Match(T__71);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 355;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileTimeIntegerTypeContext : ParserRuleContext {
		public CompileTimeIntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileTimeIntegerType; } }
	}

	[RuleVersion(0)]
	public CompileTimeIntegerTypeContext compileTimeIntegerType() {
		CompileTimeIntegerTypeContext _localctx = new CompileTimeIntegerTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_compileTimeIntegerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		public RuntimeTypeCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeCase; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeCaseContext runtimeTypeCase() {
		RuntimeTypeCaseContext _localctx = new RuntimeTypeCaseContext(Context, State);
		EnterRule(_localctx, 80, RULE_runtimeTypeCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(T__3);
			State = 361;
			expression(0);
			State = 362;
			Match(T__4);
			State = 363;
			runtimeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeSwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext[] runtimeTypeCase() {
			return GetRuleContexts<RuntimeTypeCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext runtimeTypeCase(int i) {
			return GetRuleContext<RuntimeTypeCaseContext>(i);
		}
		public RuntimeTypeSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeSwitch; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeSwitchContext runtimeTypeSwitch() {
		RuntimeTypeSwitchContext _localctx = new RuntimeTypeSwitchContext(Context, State);
		EnterRule(_localctx, 82, RULE_runtimeTypeSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			Match(T__6);
			State = 366;
			expression(0);
			State = 367;
			Match(T__7);
			State = 368;
			runtimeTypeCase();
			State = 373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__37) {
				{
				{
				State = 369;
				Match(T__37);
				State = 370;
				runtimeTypeCase();
				}
				}
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 376;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeSwitchContext runtimeTypeSwitch() {
			return GetRuleContext<RuntimeTypeSwitchContext>(0);
		}
		public RuntimeTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeReference; } }
	}

	[RuleVersion(0)]
	public RuntimeTypeReferenceContext runtimeTypeReference() {
		RuntimeTypeReferenceContext _localctx = new RuntimeTypeReferenceContext(Context, State);
		EnterRule(_localctx, 84, RULE_runtimeTypeReference);
		try {
			State = 380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378;
				runtimeOperandType();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 379;
				runtimeTypeSwitch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public OperandTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandTypeDeclaration; } }
	}

	[RuleVersion(0)]
	public OperandTypeDeclarationContext operandTypeDeclaration() {
		OperandTypeDeclarationContext _localctx = new OperandTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 86, RULE_operandTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(T__76);
			State = 383;
			identifier();
			State = 384;
			Match(T__10);
			State = 385;
			runtimeTypeReference();
			State = 389;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 386;
					line();
					}
					} 
				}
				State = 391;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UndefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefinedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
		UndefinedVariableDeclarationContext _localctx = new UndefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_undefinedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			variableType();
			State = 393;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedVariableDeclaration; } }
	}

	[RuleVersion(0)]
	public DefinedVariableDeclarationContext definedVariableDeclaration() {
		DefinedVariableDeclarationContext _localctx = new DefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_definedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			variableType();
			State = 396;
			identifier();
			State = 397;
			Match(T__10);
			State = 398;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
			return GetRuleContext<UndefinedVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedVariableDeclarationContext definedVariableDeclaration() {
			return GetRuleContext<DefinedVariableDeclarationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_variableDeclaration);
		try {
			State = 402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400;
				undefinedVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 401;
				definedVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,84,405,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,1,0,5,0,96,8,0,10,0,12,0,99,9,
		0,1,0,1,0,1,1,1,1,3,1,105,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,3,2,119,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,3,7,138,8,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,
		149,8,9,10,9,12,9,152,9,9,1,9,1,9,1,10,1,10,3,10,158,8,10,1,11,1,11,1,
		11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,172,8,13,1,14,1,14,
		1,14,3,14,177,8,14,1,15,1,15,5,15,181,8,15,10,15,12,15,184,9,15,1,15,1,
		15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,196,8,17,1,18,1,18,1,19,
		1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
		1,22,1,23,1,23,1,23,1,23,5,23,220,8,23,10,23,12,23,223,9,23,1,23,1,23,
		1,24,1,24,3,24,229,8,24,1,24,1,24,1,24,1,24,5,24,235,8,24,10,24,12,24,
		238,9,24,3,24,240,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,250,
		8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,288,8,25,10,25,12,25,
		291,9,25,1,26,1,26,3,26,295,8,26,1,27,1,27,5,27,299,8,27,10,27,12,27,302,
		9,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
		1,31,1,31,1,31,5,31,320,8,31,10,31,12,31,323,9,31,1,32,1,32,3,32,327,8,
		32,1,33,1,33,3,33,331,8,33,1,34,1,34,1,34,3,34,336,8,34,1,34,1,34,3,34,
		340,8,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,
		38,1,38,1,38,3,38,357,8,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,
		1,41,1,41,1,41,1,41,5,41,372,8,41,10,41,12,41,375,9,41,1,41,1,41,1,42,
		1,42,3,42,381,8,42,1,43,1,43,1,43,1,43,1,43,5,43,388,8,43,10,43,12,43,
		391,9,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,3,46,403,8,
		46,1,46,0,1,50,47,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
		86,88,90,92,0,10,1,0,15,30,1,0,33,35,1,0,40,44,2,0,33,33,45,45,1,0,46,
		49,3,0,37,37,39,39,50,55,1,0,56,57,1,0,66,67,1,0,78,80,1,0,73,76,416,0,
		97,1,0,0,0,2,104,1,0,0,0,4,118,1,0,0,0,6,120,1,0,0,0,8,124,1,0,0,0,10,
		128,1,0,0,0,12,130,1,0,0,0,14,132,1,0,0,0,16,139,1,0,0,0,18,144,1,0,0,
		0,20,155,1,0,0,0,22,159,1,0,0,0,24,163,1,0,0,0,26,167,1,0,0,0,28,173,1,
		0,0,0,30,178,1,0,0,0,32,187,1,0,0,0,34,195,1,0,0,0,36,197,1,0,0,0,38,199,
		1,0,0,0,40,204,1,0,0,0,42,207,1,0,0,0,44,211,1,0,0,0,46,215,1,0,0,0,48,
		226,1,0,0,0,50,249,1,0,0,0,52,294,1,0,0,0,54,296,1,0,0,0,56,305,1,0,0,
		0,58,311,1,0,0,0,60,313,1,0,0,0,62,316,1,0,0,0,64,326,1,0,0,0,66,330,1,
		0,0,0,68,332,1,0,0,0,70,344,1,0,0,0,72,346,1,0,0,0,74,348,1,0,0,0,76,356,
		1,0,0,0,78,358,1,0,0,0,80,360,1,0,0,0,82,365,1,0,0,0,84,380,1,0,0,0,86,
		382,1,0,0,0,88,392,1,0,0,0,90,395,1,0,0,0,92,402,1,0,0,0,94,96,3,2,1,0,
		95,94,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,100,1,0,0,0,
		99,97,1,0,0,0,100,101,5,0,0,1,101,1,1,0,0,0,102,105,3,68,34,0,103,105,
		3,58,29,0,104,102,1,0,0,0,104,103,1,0,0,0,105,3,1,0,0,0,106,119,3,30,15,
		0,107,119,3,86,43,0,108,119,3,92,46,0,109,119,3,20,10,0,110,119,3,22,11,
		0,111,119,3,24,12,0,112,119,3,26,13,0,113,119,3,12,6,0,114,119,3,18,9,
		0,115,119,3,16,8,0,116,119,3,8,4,0,117,119,3,10,5,0,118,106,1,0,0,0,118,
		107,1,0,0,0,118,108,1,0,0,0,118,109,1,0,0,0,118,110,1,0,0,0,118,111,1,
		0,0,0,118,112,1,0,0,0,118,113,1,0,0,0,118,114,1,0,0,0,118,115,1,0,0,0,
		118,116,1,0,0,0,118,117,1,0,0,0,119,5,1,0,0,0,120,121,5,1,0,0,121,122,
		3,66,33,0,122,123,3,50,25,0,123,7,1,0,0,0,124,125,5,2,0,0,125,126,3,50,
		25,0,126,127,3,50,25,0,127,9,1,0,0,0,128,129,5,3,0,0,129,11,1,0,0,0,130,
		131,3,48,24,0,131,13,1,0,0,0,132,133,5,4,0,0,133,134,3,50,25,0,134,135,
		5,5,0,0,135,137,3,4,2,0,136,138,5,3,0,0,137,136,1,0,0,0,137,138,1,0,0,
		0,138,15,1,0,0,0,139,140,5,6,0,0,140,141,3,50,25,0,141,142,3,70,35,0,142,
		143,3,30,15,0,143,17,1,0,0,0,144,145,5,7,0,0,145,146,3,50,25,0,146,150,
		5,8,0,0,147,149,3,14,7,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,
		0,150,151,1,0,0,0,151,153,1,0,0,0,152,150,1,0,0,0,153,154,5,9,0,0,154,
		19,1,0,0,0,155,157,5,10,0,0,156,158,3,50,25,0,157,156,1,0,0,0,157,158,
		1,0,0,0,158,21,1,0,0,0,159,160,3,70,35,0,160,161,5,11,0,0,161,162,3,50,
		25,0,162,23,1,0,0,0,163,164,5,12,0,0,164,165,3,70,35,0,165,166,3,50,25,
		0,166,25,1,0,0,0,167,168,5,13,0,0,168,169,3,44,22,0,169,171,3,4,2,0,170,
		172,3,28,14,0,171,170,1,0,0,0,171,172,1,0,0,0,172,27,1,0,0,0,173,174,5,
		14,0,0,174,176,3,4,2,0,175,177,3,28,14,0,176,175,1,0,0,0,176,177,1,0,0,
		0,177,29,1,0,0,0,178,182,5,8,0,0,179,181,3,4,2,0,180,179,1,0,0,0,181,184,
		1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,
		0,185,186,5,9,0,0,186,31,1,0,0,0,187,188,3,70,35,0,188,33,1,0,0,0,189,
		196,3,32,16,0,190,196,3,44,22,0,191,196,3,74,37,0,192,196,3,72,36,0,193,
		196,3,38,19,0,194,196,3,36,18,0,195,189,1,0,0,0,195,190,1,0,0,0,195,191,
		1,0,0,0,195,192,1,0,0,0,195,193,1,0,0,0,195,194,1,0,0,0,196,35,1,0,0,0,
		197,198,7,0,0,0,198,37,1,0,0,0,199,200,5,31,0,0,200,201,3,66,33,0,201,
		202,5,32,0,0,202,203,3,50,25,0,203,39,1,0,0,0,204,205,7,1,0,0,205,206,
		3,34,17,0,206,41,1,0,0,0,207,208,5,36,0,0,208,209,3,66,33,0,209,210,3,
		50,25,0,210,43,1,0,0,0,211,212,5,31,0,0,212,213,3,50,25,0,213,214,5,32,
		0,0,214,45,1,0,0,0,215,216,5,37,0,0,216,221,3,70,35,0,217,218,5,38,0,0,
		218,220,3,70,35,0,219,217,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,
		222,1,0,0,0,222,224,1,0,0,0,223,221,1,0,0,0,224,225,5,39,0,0,225,47,1,
		0,0,0,226,228,3,70,35,0,227,229,3,46,23,0,228,227,1,0,0,0,228,229,1,0,
		0,0,229,230,1,0,0,0,230,239,5,31,0,0,231,236,3,50,25,0,232,233,5,38,0,
		0,233,235,3,50,25,0,234,232,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,
		237,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,239,231,1,0,0,0,239,240,1,
		0,0,0,240,241,1,0,0,0,241,242,5,32,0,0,242,49,1,0,0,0,243,244,6,25,-1,
		0,244,250,3,48,24,0,245,250,3,6,3,0,246,250,3,34,17,0,247,250,3,40,20,
		0,248,250,3,42,21,0,249,243,1,0,0,0,249,245,1,0,0,0,249,246,1,0,0,0,249,
		247,1,0,0,0,249,248,1,0,0,0,250,289,1,0,0,0,251,252,10,11,0,0,252,253,
		7,2,0,0,253,288,3,50,25,12,254,255,10,10,0,0,255,256,7,3,0,0,256,288,3,
		50,25,11,257,258,10,9,0,0,258,259,7,4,0,0,259,288,3,50,25,10,260,261,10,
		8,0,0,261,262,7,5,0,0,262,288,3,50,25,9,263,264,10,7,0,0,264,265,7,6,0,
		0,265,288,3,50,25,8,266,267,10,6,0,0,267,268,5,58,0,0,268,288,3,50,25,
		7,269,270,10,5,0,0,270,271,5,59,0,0,271,288,3,50,25,6,272,273,10,4,0,0,
		273,274,5,60,0,0,274,288,3,50,25,5,275,276,10,3,0,0,276,277,5,61,0,0,277,
		288,3,50,25,4,278,279,10,2,0,0,279,280,5,62,0,0,280,288,3,50,25,3,281,
		282,10,1,0,0,282,283,5,63,0,0,283,284,3,50,25,0,284,285,5,5,0,0,285,286,
		3,50,25,2,286,288,1,0,0,0,287,251,1,0,0,0,287,254,1,0,0,0,287,257,1,0,
		0,0,287,260,1,0,0,0,287,263,1,0,0,0,287,266,1,0,0,0,287,269,1,0,0,0,287,
		272,1,0,0,0,287,275,1,0,0,0,287,278,1,0,0,0,287,281,1,0,0,0,288,291,1,
		0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,51,1,0,0,0,291,289,1,0,0,0,292,
		295,3,70,35,0,293,295,3,74,37,0,294,292,1,0,0,0,294,293,1,0,0,0,295,53,
		1,0,0,0,296,300,5,31,0,0,297,299,3,52,26,0,298,297,1,0,0,0,299,302,1,0,
		0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,
		304,5,32,0,0,304,55,1,0,0,0,305,306,5,64,0,0,306,307,3,74,37,0,307,308,
		3,70,35,0,308,309,3,54,27,0,309,310,3,30,15,0,310,57,1,0,0,0,311,312,3,
		56,28,0,312,59,1,0,0,0,313,314,3,66,33,0,314,315,3,70,35,0,315,61,1,0,
		0,0,316,321,3,60,30,0,317,318,5,38,0,0,318,320,3,60,30,0,319,317,1,0,0,
		0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,63,1,0,0,0,323,321,
		1,0,0,0,324,327,3,30,15,0,325,327,5,65,0,0,326,324,1,0,0,0,326,325,1,0,
		0,0,327,65,1,0,0,0,328,331,3,76,38,0,329,331,3,78,39,0,330,328,1,0,0,0,
		330,329,1,0,0,0,331,67,1,0,0,0,332,333,3,66,33,0,333,335,3,70,35,0,334,
		336,3,46,23,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,339,
		5,31,0,0,338,340,3,62,31,0,339,338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,
		0,0,341,342,5,32,0,0,342,343,3,64,32,0,343,69,1,0,0,0,344,345,5,81,0,0,
		345,71,1,0,0,0,346,347,7,7,0,0,347,73,1,0,0,0,348,349,7,8,0,0,349,75,1,
		0,0,0,350,357,5,68,0,0,351,357,5,69,0,0,352,357,5,70,0,0,353,357,5,71,
		0,0,354,357,5,72,0,0,355,357,3,70,35,0,356,350,1,0,0,0,356,351,1,0,0,0,
		356,352,1,0,0,0,356,353,1,0,0,0,356,354,1,0,0,0,356,355,1,0,0,0,357,77,
		1,0,0,0,358,359,7,9,0,0,359,79,1,0,0,0,360,361,5,4,0,0,361,362,3,50,25,
		0,362,363,5,5,0,0,363,364,3,84,42,0,364,81,1,0,0,0,365,366,5,7,0,0,366,
		367,3,50,25,0,367,368,5,8,0,0,368,373,3,80,40,0,369,370,5,38,0,0,370,372,
		3,80,40,0,371,369,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,
		0,0,374,376,1,0,0,0,375,373,1,0,0,0,376,377,5,9,0,0,377,83,1,0,0,0,378,
		381,3,76,38,0,379,381,3,82,41,0,380,378,1,0,0,0,380,379,1,0,0,0,381,85,
		1,0,0,0,382,383,5,77,0,0,383,384,3,70,35,0,384,385,5,11,0,0,385,389,3,
		84,42,0,386,388,3,4,2,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,
		0,389,390,1,0,0,0,390,87,1,0,0,0,391,389,1,0,0,0,392,393,3,66,33,0,393,
		394,3,70,35,0,394,89,1,0,0,0,395,396,3,66,33,0,396,397,3,70,35,0,397,398,
		5,11,0,0,398,399,3,50,25,0,399,91,1,0,0,0,400,403,3,88,44,0,401,403,3,
		90,45,0,402,400,1,0,0,0,402,401,1,0,0,0,403,93,1,0,0,0,29,97,104,118,137,
		150,157,171,176,182,195,221,228,236,239,249,287,289,294,300,321,326,330,
		335,339,356,373,380,389,402
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
