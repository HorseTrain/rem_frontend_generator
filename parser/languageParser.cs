//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class languageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, DECIMAL=100, BINARY=101, 
		HEX=102, IDENTIFIER=103, WHITE_SPACE=104, LINE_COMMENT=105, BLOB_COMMENT=106;
	public const int
		RULE_sourceFile = 0, RULE_topLevelDeclarations = 1, RULE_elementInsert = 2, 
		RULE_elementExtract = 3, RULE_line = 4, RULE_hostMemoryRead = 5, RULE_hostMemoryWrite = 6, 
		RULE_semiColin = 7, RULE_functionCallLine = 8, RULE_caseStatement = 9, 
		RULE_loopStatement = 10, RULE_switchStatement = 11, RULE_returnStatement = 12, 
		RULE_lValueSet = 13, RULE_runtimeSet = 14, RULE_ifStatement = 15, RULE_elseStatement = 16, 
		RULE_scope = 17, RULE_identifierExpression = 18, RULE_externalIdentifierExpression = 19, 
		RULE_internalIdentifierExpression = 20, RULE_baseExpression = 21, RULE_constants = 22, 
		RULE_cast = 23, RULE_unaryExpression = 24, RULE_signedSign = 25, RULE_floatConversions = 26, 
		RULE_signExtend = 27, RULE_parenthesis = 28, RULE_genericImpl = 29, RULE_functionCall = 30, 
		RULE_vectorZero = 31, RULE_vectorOne = 32, RULE_expression = 33, RULE_encodingExtra = 34, 
		RULE_fixedLengthInstructionOperand = 35, RULE_fixedLengthInstructionOperands = 36, 
		RULE_fixedLengthInstruction = 37, RULE_instructionDeclaration = 38, RULE_functionParameter = 39, 
		RULE_functionParameters = 40, RULE_functionBody = 41, RULE_variableType = 42, 
		RULE_typeParameters = 43, RULE_functionType = 44, RULE_functionDeclaration = 45, 
		RULE_identifier = 46, RULE_trueFalse = 47, RULE_number = 48, RULE_runtimeOperandType = 49, 
		RULE_compileTimeIntegerType = 50, RULE_runtimeTypeCase = 51, RULE_runtimeTypeSwitch = 52, 
		RULE_runtimeTypeReference = 53, RULE_operandTypeDeclaration = 54, RULE_undefinedVariableDeclaration = 55, 
		RULE_definedVariableDeclaration = 56, RULE_variableDeclaration = 57;
	public static readonly string[] ruleNames = {
		"sourceFile", "topLevelDeclarations", "elementInsert", "elementExtract", 
		"line", "hostMemoryRead", "hostMemoryWrite", "semiColin", "functionCallLine", 
		"caseStatement", "loopStatement", "switchStatement", "returnStatement", 
		"lValueSet", "runtimeSet", "ifStatement", "elseStatement", "scope", "identifierExpression", 
		"externalIdentifierExpression", "internalIdentifierExpression", "baseExpression", 
		"constants", "cast", "unaryExpression", "signedSign", "floatConversions", 
		"signExtend", "parenthesis", "genericImpl", "functionCall", "vectorZero", 
		"vectorOne", "expression", "encodingExtra", "fixedLengthInstructionOperand", 
		"fixedLengthInstructionOperands", "fixedLengthInstruction", "instructionDeclaration", 
		"functionParameter", "functionParameters", "functionBody", "variableType", 
		"typeParameters", "functionType", "functionDeclaration", "identifier", 
		"trueFalse", "number", "runtimeOperandType", "compileTimeIntegerType", 
		"runtimeTypeCase", "runtimeTypeSwitch", "runtimeTypeReference", "operandTypeDeclaration", 
		"undefinedVariableDeclaration", "definedVariableDeclaration", "variableDeclaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'elm'", "'physical_read'", "'physical_write'", "';'", "'case'", 
		"':'", "'loop'", "'switch'", "'{'", "'}'", "'return'", "'='", "'set'", 
		"'if'", "'else'", "'external'", "'internal'", "'UINT8_MIN'", "'INT8_MIN'", 
		"'UINT16_MIN'", "'INT16_MIN'", "'UINT32_MIN'", "'INT32_MIN'", "'UINT64_MIN'", 
		"'INT64_MIN'", "'UINT8_MAX'", "'INT8_MAX'", "'UINT16_MAX'", "'INT16_MAX'", 
		"'UINT32_MAX'", "'INT32_MAX'", "'UINT64_MAX'", "'INT64_MAX'", "'('", "')'", 
		"'-'", "'~'", "'!'", "'fsqrt'", "'signed'", "'to_float'", "'to_int'", 
		"'extend'", "'<'", "','", "'>'", "'vector_zero'", "'vector_one'", "'*'", 
		"'/'", "'sdiv'", "'umulh'", "'smulh'", "'%'", "'fmul'", "'fdiv'", "'+'", 
		"'fadd'", "'fsub'", "'<<'", "'>>'", "'sar'", "'ror'", "'clt'", "'cgt'", 
		"'clte'", "'cgte'", "'<='", "'>='", "'fclt'", "'fclte'", "'fcgt'", "'fcgte'", 
		"'=='", "'!='", "'feq'", "'fneq'", "'fmax'", "'fmin'", "'&'", "'^'", "'|'", 
		"'&&'", "'||'", "'?'", "'fl_instruction'", "'void_function'", "'true'", 
		"'false'", "'o8'", "'o16'", "'o32'", "'o64'", "'o128'", "'i64'", "'integer'", 
		"'int'", "'void'", "'o_type'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "DECIMAL", "BINARY", "HEX", "IDENTIFIER", "WHITE_SPACE", 
		"LINE_COMMENT", "BLOB_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static languageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public languageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public languageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(languageParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext[] topLevelDeclarations() {
			return GetRuleContexts<TopLevelDeclarationsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDeclarationsContext topLevelDeclarations(int i) {
			return GetRuleContext<TopLevelDeclarationsContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__33 || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & 139251L) != 0)) {
				{
				{
				State = 116;
				topLevelDeclarations();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionDeclarationContext instructionDeclaration() {
			return GetRuleContext<InstructionDeclarationContext>(0);
		}
		public TopLevelDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterTopLevelDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitTopLevelDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelDeclarationsContext topLevelDeclarations() {
		TopLevelDeclarationsContext _localctx = new TopLevelDeclarationsContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelDeclarations);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
			case T__86:
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case T__94:
			case T__95:
			case T__96:
			case T__97:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				functionDeclaration();
				}
				break;
			case T__85:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				instructionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementInsertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ElementInsertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementInsert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterElementInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitElementInsert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementInsert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementInsertContext elementInsert() {
		ElementInsertContext _localctx = new ElementInsertContext(Context, State);
		EnterRule(_localctx, 4, RULE_elementInsert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__0);
			State = 129;
			expression(0);
			State = 130;
			expression(0);
			State = 131;
			expression(0);
			State = 132;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementExtractContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ElementExtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementExtract; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterElementExtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitElementExtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementExtract(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementExtractContext elementExtract() {
		ElementExtractContext _localctx = new ElementExtractContext(Context, State);
		EnterRule(_localctx, 6, RULE_elementExtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(T__0);
			State = 135;
			expression(0);
			State = 136;
			expression(0);
			State = 137;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandTypeDeclarationContext operandTypeDeclaration() {
			return GetRuleContext<OperandTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueSetContext lValueSet() {
			return GetRuleContext<LValueSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeSetContext runtimeSet() {
			return GetRuleContext<RuntimeSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallLineContext functionCallLine() {
			return GetRuleContext<FunctionCallLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostMemoryWriteContext hostMemoryWrite() {
			return GetRuleContext<HostMemoryWriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SemiColinContext semiColin() {
			return GetRuleContext<SemiColinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementInsertContext elementInsert() {
			return GetRuleContext<ElementInsertContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 8, RULE_line);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				scope();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				operandTypeDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141;
				variableDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 142;
				returnStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 143;
				lValueSet();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 144;
				runtimeSet();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 145;
				ifStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 146;
				functionCallLine();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 147;
				switchStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 148;
				loopStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 149;
				hostMemoryWrite();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 150;
				semiColin();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 151;
				elementInsert();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostMemoryReadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HostMemoryReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostMemoryRead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterHostMemoryRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitHostMemoryRead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHostMemoryRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostMemoryReadContext hostMemoryRead() {
		HostMemoryReadContext _localctx = new HostMemoryReadContext(Context, State);
		EnterRule(_localctx, 10, RULE_hostMemoryRead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(T__1);
			State = 155;
			variableType();
			State = 156;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostMemoryWriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HostMemoryWriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostMemoryWrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterHostMemoryWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitHostMemoryWrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHostMemoryWrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostMemoryWriteContext hostMemoryWrite() {
		HostMemoryWriteContext _localctx = new HostMemoryWriteContext(Context, State);
		EnterRule(_localctx, 12, RULE_hostMemoryWrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(T__2);
			State = 159;
			expression(0);
			State = 160;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiColinContext : ParserRuleContext {
		public SemiColinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semiColin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterSemiColin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitSemiColin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemiColin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemiColinContext semiColin() {
		SemiColinContext _localctx = new SemiColinContext(Context, State);
		EnterRule(_localctx, 14, RULE_semiColin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFunctionCallLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFunctionCallLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallLineContext functionCallLine() {
		FunctionCallLineContext _localctx = new FunctionCallLineContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCallLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(T__4);
			State = 167;
			expression(0);
			State = 168;
			Match(T__5);
			State = 169;
			line();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 170;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_loopStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(T__6);
			State = 174;
			expression(0);
			State = 175;
			identifier();
			State = 176;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(T__7);
			State = 179;
			expression(0);
			State = 180;
			Match(T__8);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 181;
				caseStatement();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 187;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__10);
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 190;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LValueSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterLValueSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitLValueSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLValueSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LValueSetContext lValueSet() {
		LValueSetContext _localctx = new LValueSetContext(Context, State);
		EnterRule(_localctx, 26, RULE_lValueSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			identifier();
			State = 194;
			Match(T__11);
			State = 195;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RuntimeSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterRuntimeSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitRuntimeSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeSetContext runtimeSet() {
		RuntimeSetContext _localctx = new RuntimeSetContext(Context, State);
		EnterRule(_localctx, 28, RULE_runtimeSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__12);
			State = 198;
			identifier();
			State = 199;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(T__13);
			State = 202;
			parenthesis();
			State = 203;
			line();
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 204;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(T__14);
			State = 208;
			line();
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 209;
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 34, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(T__8);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17179896730L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 73721L) != 0)) {
				{
				{
				State = 213;
				line();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 219;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierExpressionContext identifierExpression() {
		IdentifierExpressionContext _localctx = new IdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifierExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalIdentifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierExpressionContext identifierExpression() {
			return GetRuleContext<IdentifierExpressionContext>(0);
		}
		public ExternalIdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalIdentifierExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterExternalIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitExternalIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalIdentifierExpressionContext externalIdentifierExpression() {
		ExternalIdentifierExpressionContext _localctx = new ExternalIdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_externalIdentifierExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(T__15);
			State = 224;
			identifierExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalIdentifierExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierExpressionContext identifierExpression() {
			return GetRuleContext<IdentifierExpressionContext>(0);
		}
		public InternalIdentifierExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalIdentifierExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterInternalIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitInternalIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternalIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalIdentifierExpressionContext internalIdentifierExpression() {
		InternalIdentifierExpressionContext _localctx = new InternalIdentifierExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_internalIdentifierExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(T__16);
			State = 227;
			identifierExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierExpressionContext identifierExpression() {
			return GetRuleContext<IdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalIdentifierExpressionContext externalIdentifierExpression() {
			return GetRuleContext<ExternalIdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InternalIdentifierExpressionContext internalIdentifierExpression() {
			return GetRuleContext<InternalIdentifierExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueFalseContext trueFalse() {
			return GetRuleContext<TrueFalseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastContext cast() {
			return GetRuleContext<CastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		public BaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitBaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseExpressionContext baseExpression() {
		BaseExpressionContext _localctx = new BaseExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_baseExpression);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229;
				identifierExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230;
				externalIdentifierExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				internalIdentifierExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 232;
				parenthesis();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 233;
				number();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 234;
				trueFalse();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 235;
				cast();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 236;
				constants();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 44, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17179607040L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastContext cast() {
		CastContext _localctx = new CastContext(Context, State);
		EnterRule(_localctx, 46, RULE_cast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(T__33);
			State = 242;
			variableType();
			State = 243;
			Match(T__34);
			State = 244;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1030792151040L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 247;
			baseExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedSignContext : ParserRuleContext {
		public SignedSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedSign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterSignedSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitSignedSign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedSignContext signedSign() {
		SignedSignContext _localctx = new SignedSignContext(Context, State);
		EnterRule(_localctx, 50, RULE_signedSign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(T__39);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatConversionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedSignContext signedSign() {
			return GetRuleContext<SignedSignContext>(0);
		}
		public FloatConversionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatConversions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFloatConversions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFloatConversions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatConversions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatConversionsContext floatConversions() {
		FloatConversionsContext _localctx = new FloatConversionsContext(Context, State);
		EnterRule(_localctx, 52, RULE_floatConversions);
		int _la;
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				Match(T__40);
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__39) {
					{
					State = 252;
					signedSign();
					}
				}

				State = 255;
				variableType();
				State = 256;
				expression(0);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258;
				Match(T__41);
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__39) {
					{
					State = 259;
					signedSign();
					}
				}

				State = 262;
				variableType();
				State = 263;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignExtendContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignExtendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signExtend; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterSignExtend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitSignExtend(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignExtend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignExtendContext signExtend() {
		SignExtendContext _localctx = new SignExtendContext(Context, State);
		EnterRule(_localctx, 54, RULE_signExtend);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(T__42);
			State = 268;
			variableType();
			State = 269;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisContext parenthesis() {
		ParenthesisContext _localctx = new ParenthesisContext(Context, State);
		EnterRule(_localctx, 56, RULE_parenthesis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(T__33);
			State = 272;
			expression(0);
			State = 273;
			Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericImplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext[] variableType() {
			return GetRuleContexts<VariableTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType(int i) {
			return GetRuleContext<VariableTypeContext>(i);
		}
		public GenericImplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericImpl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterGenericImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitGenericImpl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericImpl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericImplContext genericImpl() {
		GenericImplContext _localctx = new GenericImplContext(Context, State);
		EnterRule(_localctx, 58, RULE_genericImpl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(T__43);
			State = 276;
			variableType();
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__44) {
				{
				{
				State = 277;
				Match(T__44);
				State = 278;
				variableType();
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 284;
			Match(T__45);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			identifier();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__43) {
				{
				State = 287;
				genericImpl();
				}
			}

			State = 290;
			Match(T__33);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 438670779678726L) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 61443L) != 0)) {
				{
				State = 291;
				expression(0);
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__44) {
					{
					{
					State = 292;
					Match(T__44);
					State = 293;
					expression(0);
					}
					}
					State = 298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 301;
			Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorZeroContext : ParserRuleContext {
		public VectorZeroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorZero; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterVectorZero(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitVectorZero(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorZero(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorZeroContext vectorZero() {
		VectorZeroContext _localctx = new VectorZeroContext(Context, State);
		EnterRule(_localctx, 62, RULE_vectorZero);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(T__46);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorOneContext : ParserRuleContext {
		public VectorOneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorOne; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterVectorOne(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitVectorOne(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorOne(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorOneContext vectorOne() {
		VectorOneContext _localctx = new VectorOneContext(Context, State);
		EnterRule(_localctx, 64, RULE_vectorOne);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(T__47);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostMemoryReadContext hostMemoryRead() {
			return GetRuleContext<HostMemoryReadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseExpressionContext baseExpression() {
			return GetRuleContext<BaseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatConversionsContext floatConversions() {
			return GetRuleContext<FloatConversionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignExtendContext signExtend() {
			return GetRuleContext<SignExtendContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementExtractContext elementExtract() {
			return GetRuleContext<ElementExtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VectorZeroContext vectorZero() {
			return GetRuleContext<VectorZeroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VectorOneContext vectorOne() {
			return GetRuleContext<VectorOneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 308;
				functionCall();
				}
				break;
			case 2:
				{
				State = 309;
				hostMemoryRead();
				}
				break;
			case 3:
				{
				State = 310;
				baseExpression();
				}
				break;
			case 4:
				{
				State = 311;
				unaryExpression();
				}
				break;
			case 5:
				{
				State = 312;
				floatConversions();
				}
				break;
			case 6:
				{
				State = 313;
				signExtend();
				}
				break;
			case 7:
				{
				State = 314;
				elementExtract();
				}
				break;
			case 8:
				{
				State = 315;
				vectorZero();
				}
				break;
			case 9:
				{
				State = 316;
				vectorOne();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 360;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 358;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 319;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 320;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 143552238122434560L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 321;
						expression(13);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 322;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 323;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1008806385250467840L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 324;
						expression(12);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 325;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 326;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921504606846976L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 327;
						expression(11);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 328;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 329;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 1072693253L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 330;
						expression(10);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 331;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 332;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 15L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 333;
						expression(9);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 334;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 335;
						_la = TokenStream.LA(1);
						if ( !(_la==T__77 || _la==T__78) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 336;
						expression(8);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 337;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 338;
						Match(T__79);
						State = 339;
						expression(7);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 340;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 341;
						Match(T__80);
						State = 342;
						expression(6);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 343;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 344;
						Match(T__81);
						State = 345;
						expression(5);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 346;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 347;
						Match(T__82);
						State = 348;
						expression(4);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 349;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 350;
						Match(T__83);
						State = 351;
						expression(3);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 352;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 353;
						Match(T__84);
						State = 354;
						expression(0);
						State = 355;
						Match(T__5);
						State = 356;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EncodingExtraContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public EncodingExtraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingExtra; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterEncodingExtra(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitEncodingExtra(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingExtra(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingExtraContext encodingExtra() {
		EncodingExtraContext _localctx = new EncodingExtraContext(Context, State);
		EnterRule(_localctx, 68, RULE_encodingExtra);
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__74:
				EnterOuterAlt(_localctx, 1);
				{
				State = 363;
				Match(T__74);
				State = 364;
				number();
				}
				break;
			case T__73:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365;
				Match(T__73);
				State = 366;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncodingExtraContext encodingExtra() {
			return GetRuleContext<EncodingExtraContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public FixedLengthInstructionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFixedLengthInstructionOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFixedLengthInstructionOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedLengthInstructionOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandContext fixedLengthInstructionOperand() {
		FixedLengthInstructionOperandContext _localctx = new FixedLengthInstructionOperandContext(Context, State);
		EnterRule(_localctx, 70, RULE_fixedLengthInstructionOperand);
		int _la;
		try {
			State = 374;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369;
				identifier();
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__73 || _la==T__74) {
					{
					State = 370;
					encodingExtra();
					}
				}

				}
				break;
			case DECIMAL:
			case BINARY:
			case HEX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionOperandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext[] fixedLengthInstructionOperand() {
			return GetRuleContexts<FixedLengthInstructionOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandContext fixedLengthInstructionOperand(int i) {
			return GetRuleContext<FixedLengthInstructionOperandContext>(i);
		}
		public FixedLengthInstructionOperandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstructionOperands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFixedLengthInstructionOperands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFixedLengthInstructionOperands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedLengthInstructionOperands(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
		FixedLengthInstructionOperandsContext _localctx = new FixedLengthInstructionOperandsContext(Context, State);
		EnterRule(_localctx, 72, RULE_fixedLengthInstructionOperands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(T__33);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & 15L) != 0)) {
				{
				{
				State = 377;
				fixedLengthInstructionOperand();
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 383;
			Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedLengthInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionOperandsContext fixedLengthInstructionOperands() {
			return GetRuleContext<FixedLengthInstructionOperandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FixedLengthInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedLengthInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFixedLengthInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFixedLengthInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedLengthInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedLengthInstructionContext fixedLengthInstruction() {
		FixedLengthInstructionContext _localctx = new FixedLengthInstructionContext(Context, State);
		EnterRule(_localctx, 74, RULE_fixedLengthInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			Match(T__85);
			State = 386;
			number();
			State = 387;
			identifier();
			State = 388;
			fixedLengthInstructionOperands();
			State = 389;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FixedLengthInstructionContext fixedLengthInstruction() {
			return GetRuleContext<FixedLengthInstructionContext>(0);
		}
		public InstructionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterInstructionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitInstructionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstructionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionDeclarationContext instructionDeclaration() {
		InstructionDeclarationContext _localctx = new InstructionDeclarationContext(Context, State);
		EnterRule(_localctx, 76, RULE_instructionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			fixedLengthInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 78, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			variableType();
			State = 394;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 80, RULE_functionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			functionParameter();
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__44) {
				{
				{
				State = 397;
				Match(T__44);
				State = 398;
				functionParameter();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 82, RULE_functionBody);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404;
				scope();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405;
				Match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompileTimeIntegerTypeContext compileTimeIntegerType() {
			return GetRuleContext<CompileTimeIntegerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public VariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterVariableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitVariableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableTypeContext variableType() {
		VariableTypeContext _localctx = new VariableTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_variableType);
		try {
			State = 411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408;
				runtimeOperandType();
				}
				break;
			case T__94:
			case T__95:
			case T__96:
			case T__97:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				compileTimeIntegerType();
				}
				break;
			case T__33:
			case T__86:
				EnterOuterAlt(_localctx, 3);
				{
				State = 410;
				functionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext[] variableType() {
			return GetRuleContexts<VariableTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType(int i) {
			return GetRuleContext<VariableTypeContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			variableType();
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__44) {
				{
				{
				State = 414;
				Match(T__44);
				State = 415;
				variableType();
				}
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 88, RULE_functionType);
		int _la;
		try {
			State = 431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__86:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421;
				Match(T__86);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422;
				Match(T__33);
				State = 423;
				variableType();
				State = 424;
				Match(T__33);
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__33 || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 69625L) != 0)) {
					{
					State = 425;
					typeParameters();
					}
				}

				State = 428;
				Match(T__34);
				State = 429;
				Match(T__34);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericImplContext genericImpl() {
			return GetRuleContext<GenericImplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			variableType();
			State = 434;
			identifier();
			State = 436;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__43) {
				{
				State = 435;
				genericImpl();
				}
			}

			State = 438;
			Match(T__33);
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33 || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 69625L) != 0)) {
				{
				State = 439;
				functionParameters();
				}
			}

			State = 442;
			Match(T__34);
			State = 443;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(languageParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueFalseContext : ParserRuleContext {
		public TrueFalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueFalse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterTrueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitTrueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrueFalseContext trueFalse() {
		TrueFalseContext _localctx = new TrueFalseContext(Context, State);
		EnterRule(_localctx, 94, RULE_trueFalse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			_la = TokenStream.LA(1);
			if ( !(_la==T__87 || _la==T__88) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(languageParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(languageParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(languageParser.HEX, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 96, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeOperandTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RuntimeOperandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeOperandType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterRuntimeOperandType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitRuntimeOperandType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeOperandType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeOperandTypeContext runtimeOperandType() {
		RuntimeOperandTypeContext _localctx = new RuntimeOperandTypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_runtimeOperandType);
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__89:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				Match(T__89);
				}
				break;
			case T__90:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452;
				Match(T__90);
				}
				break;
			case T__91:
				EnterOuterAlt(_localctx, 3);
				{
				State = 453;
				Match(T__91);
				}
				break;
			case T__92:
				EnterOuterAlt(_localctx, 4);
				{
				State = 454;
				Match(T__92);
				}
				break;
			case T__93:
				EnterOuterAlt(_localctx, 5);
				{
				State = 455;
				Match(T__93);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 456;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileTimeIntegerTypeContext : ParserRuleContext {
		public CompileTimeIntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileTimeIntegerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterCompileTimeIntegerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitCompileTimeIntegerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileTimeIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileTimeIntegerTypeContext compileTimeIntegerType() {
		CompileTimeIntegerTypeContext _localctx = new CompileTimeIntegerTypeContext(Context, State);
		EnterRule(_localctx, 100, RULE_compileTimeIntegerType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		public RuntimeTypeCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterRuntimeTypeCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitRuntimeTypeCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeTypeCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeTypeCaseContext runtimeTypeCase() {
		RuntimeTypeCaseContext _localctx = new RuntimeTypeCaseContext(Context, State);
		EnterRule(_localctx, 102, RULE_runtimeTypeCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			Match(T__4);
			State = 462;
			expression(0);
			State = 463;
			Match(T__5);
			State = 464;
			runtimeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeSwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext[] runtimeTypeCase() {
			return GetRuleContexts<RuntimeTypeCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeCaseContext runtimeTypeCase(int i) {
			return GetRuleContext<RuntimeTypeCaseContext>(i);
		}
		public RuntimeTypeSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeSwitch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterRuntimeTypeSwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitRuntimeTypeSwitch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeTypeSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeTypeSwitchContext runtimeTypeSwitch() {
		RuntimeTypeSwitchContext _localctx = new RuntimeTypeSwitchContext(Context, State);
		EnterRule(_localctx, 104, RULE_runtimeTypeSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(T__7);
			State = 467;
			expression(0);
			State = 468;
			Match(T__8);
			State = 469;
			runtimeTypeCase();
			State = 474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__44) {
				{
				{
				State = 470;
				Match(T__44);
				State = 471;
				runtimeTypeCase();
				}
				}
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 477;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeTypeReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeOperandTypeContext runtimeOperandType() {
			return GetRuleContext<RuntimeOperandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeSwitchContext runtimeTypeSwitch() {
			return GetRuleContext<RuntimeTypeSwitchContext>(0);
		}
		public RuntimeTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeTypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterRuntimeTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitRuntimeTypeReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuntimeTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeTypeReferenceContext runtimeTypeReference() {
		RuntimeTypeReferenceContext _localctx = new RuntimeTypeReferenceContext(Context, State);
		EnterRule(_localctx, 106, RULE_runtimeTypeReference);
		try {
			State = 481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__89:
			case T__90:
			case T__91:
			case T__92:
			case T__93:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 479;
				runtimeOperandType();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 480;
				runtimeTypeSwitch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeTypeReferenceContext runtimeTypeReference() {
			return GetRuleContext<RuntimeTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public OperandTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterOperandTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitOperandTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperandTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandTypeDeclarationContext operandTypeDeclaration() {
		OperandTypeDeclarationContext _localctx = new OperandTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_operandTypeDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			Match(T__98);
			State = 484;
			identifier();
			State = 485;
			Match(T__11);
			State = 486;
			runtimeTypeReference();
			State = 490;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 487;
					line();
					}
					} 
				}
				State = 492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UndefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undefinedVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterUndefinedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitUndefinedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndefinedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
		UndefinedVariableDeclarationContext _localctx = new UndefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_undefinedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			variableType();
			State = 494;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableTypeContext variableType() {
			return GetRuleContext<VariableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DefinedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterDefinedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitDefinedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedVariableDeclarationContext definedVariableDeclaration() {
		DefinedVariableDeclarationContext _localctx = new DefinedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_definedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			variableType();
			State = 497;
			identifier();
			State = 498;
			Match(T__11);
			State = 499;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UndefinedVariableDeclarationContext undefinedVariableDeclaration() {
			return GetRuleContext<UndefinedVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinedVariableDeclarationContext definedVariableDeclaration() {
			return GetRuleContext<DefinedVariableDeclarationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IlanguageListener typedListener = listener as IlanguageListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IlanguageVisitor<TResult> typedVisitor = visitor as IlanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_variableDeclaration);
		try {
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				undefinedVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 502;
				definedVariableDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 33: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,106,506,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,1,0,5,0,118,8,0,10,0,12,0,121,9,0,1,0,1,0,1,1,1,1,3,1,127,8,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,153,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
		6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,172,8,9,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,11,5,11,183,8,11,10,11,12,11,186,9,11,1,11,1,11,
		1,12,1,12,3,12,192,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,
		15,1,15,1,15,3,15,206,8,15,1,16,1,16,1,16,3,16,211,8,16,1,17,1,17,5,17,
		215,8,17,10,17,12,17,218,9,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,
		1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,238,8,21,1,22,1,
		22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,3,26,254,
		8,26,1,26,1,26,1,26,1,26,1,26,3,26,261,8,26,1,26,1,26,1,26,3,26,266,8,
		26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,5,29,280,
		8,29,10,29,12,29,283,9,29,1,29,1,29,1,30,1,30,3,30,289,8,30,1,30,1,30,
		1,30,1,30,5,30,295,8,30,10,30,12,30,298,9,30,3,30,300,8,30,1,30,1,30,1,
		31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,
		33,318,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,
		359,8,33,10,33,12,33,362,9,33,1,34,1,34,1,34,1,34,3,34,368,8,34,1,35,1,
		35,3,35,372,8,35,1,35,3,35,375,8,35,1,36,1,36,5,36,379,8,36,10,36,12,36,
		382,9,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,
		39,1,40,1,40,1,40,5,40,400,8,40,10,40,12,40,403,9,40,1,41,1,41,3,41,407,
		8,41,1,42,1,42,1,42,3,42,412,8,42,1,43,1,43,1,43,5,43,417,8,43,10,43,12,
		43,420,9,43,1,44,1,44,1,44,1,44,1,44,3,44,427,8,44,1,44,1,44,1,44,3,44,
		432,8,44,1,45,1,45,1,45,3,45,437,8,45,1,45,1,45,3,45,441,8,45,1,45,1,45,
		1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,
		458,8,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,
		52,5,52,473,8,52,10,52,12,52,476,9,52,1,52,1,52,1,53,1,53,3,53,482,8,53,
		1,54,1,54,1,54,1,54,1,54,5,54,489,8,54,10,54,12,54,492,9,54,1,55,1,55,
		1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,3,57,504,8,57,1,57,0,1,66,58,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
		100,102,104,106,108,110,112,114,0,11,1,0,18,33,1,0,36,39,1,0,49,56,2,0,
		36,36,57,59,1,0,60,63,3,0,44,44,46,46,64,73,1,0,74,77,1,0,78,79,1,0,88,
		89,1,0,100,102,1,0,95,98,523,0,119,1,0,0,0,2,126,1,0,0,0,4,128,1,0,0,0,
		6,134,1,0,0,0,8,152,1,0,0,0,10,154,1,0,0,0,12,158,1,0,0,0,14,162,1,0,0,
		0,16,164,1,0,0,0,18,166,1,0,0,0,20,173,1,0,0,0,22,178,1,0,0,0,24,189,1,
		0,0,0,26,193,1,0,0,0,28,197,1,0,0,0,30,201,1,0,0,0,32,207,1,0,0,0,34,212,
		1,0,0,0,36,221,1,0,0,0,38,223,1,0,0,0,40,226,1,0,0,0,42,237,1,0,0,0,44,
		239,1,0,0,0,46,241,1,0,0,0,48,246,1,0,0,0,50,249,1,0,0,0,52,265,1,0,0,
		0,54,267,1,0,0,0,56,271,1,0,0,0,58,275,1,0,0,0,60,286,1,0,0,0,62,303,1,
		0,0,0,64,305,1,0,0,0,66,317,1,0,0,0,68,367,1,0,0,0,70,374,1,0,0,0,72,376,
		1,0,0,0,74,385,1,0,0,0,76,391,1,0,0,0,78,393,1,0,0,0,80,396,1,0,0,0,82,
		406,1,0,0,0,84,411,1,0,0,0,86,413,1,0,0,0,88,431,1,0,0,0,90,433,1,0,0,
		0,92,445,1,0,0,0,94,447,1,0,0,0,96,449,1,0,0,0,98,457,1,0,0,0,100,459,
		1,0,0,0,102,461,1,0,0,0,104,466,1,0,0,0,106,481,1,0,0,0,108,483,1,0,0,
		0,110,493,1,0,0,0,112,496,1,0,0,0,114,503,1,0,0,0,116,118,3,2,1,0,117,
		116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,122,1,
		0,0,0,121,119,1,0,0,0,122,123,5,0,0,1,123,1,1,0,0,0,124,127,3,90,45,0,
		125,127,3,76,38,0,126,124,1,0,0,0,126,125,1,0,0,0,127,3,1,0,0,0,128,129,
		5,1,0,0,129,130,3,66,33,0,130,131,3,66,33,0,131,132,3,66,33,0,132,133,
		3,66,33,0,133,5,1,0,0,0,134,135,5,1,0,0,135,136,3,66,33,0,136,137,3,66,
		33,0,137,138,3,66,33,0,138,7,1,0,0,0,139,153,3,34,17,0,140,153,3,108,54,
		0,141,153,3,114,57,0,142,153,3,24,12,0,143,153,3,26,13,0,144,153,3,28,
		14,0,145,153,3,30,15,0,146,153,3,16,8,0,147,153,3,22,11,0,148,153,3,20,
		10,0,149,153,3,12,6,0,150,153,3,14,7,0,151,153,3,4,2,0,152,139,1,0,0,0,
		152,140,1,0,0,0,152,141,1,0,0,0,152,142,1,0,0,0,152,143,1,0,0,0,152,144,
		1,0,0,0,152,145,1,0,0,0,152,146,1,0,0,0,152,147,1,0,0,0,152,148,1,0,0,
		0,152,149,1,0,0,0,152,150,1,0,0,0,152,151,1,0,0,0,153,9,1,0,0,0,154,155,
		5,2,0,0,155,156,3,84,42,0,156,157,3,66,33,0,157,11,1,0,0,0,158,159,5,3,
		0,0,159,160,3,66,33,0,160,161,3,66,33,0,161,13,1,0,0,0,162,163,5,4,0,0,
		163,15,1,0,0,0,164,165,3,60,30,0,165,17,1,0,0,0,166,167,5,5,0,0,167,168,
		3,66,33,0,168,169,5,6,0,0,169,171,3,8,4,0,170,172,5,4,0,0,171,170,1,0,
		0,0,171,172,1,0,0,0,172,19,1,0,0,0,173,174,5,7,0,0,174,175,3,66,33,0,175,
		176,3,92,46,0,176,177,3,34,17,0,177,21,1,0,0,0,178,179,5,8,0,0,179,180,
		3,66,33,0,180,184,5,9,0,0,181,183,3,18,9,0,182,181,1,0,0,0,183,186,1,0,
		0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,
		188,5,10,0,0,188,23,1,0,0,0,189,191,5,11,0,0,190,192,3,66,33,0,191,190,
		1,0,0,0,191,192,1,0,0,0,192,25,1,0,0,0,193,194,3,92,46,0,194,195,5,12,
		0,0,195,196,3,66,33,0,196,27,1,0,0,0,197,198,5,13,0,0,198,199,3,92,46,
		0,199,200,3,66,33,0,200,29,1,0,0,0,201,202,5,14,0,0,202,203,3,56,28,0,
		203,205,3,8,4,0,204,206,3,32,16,0,205,204,1,0,0,0,205,206,1,0,0,0,206,
		31,1,0,0,0,207,208,5,15,0,0,208,210,3,8,4,0,209,211,3,32,16,0,210,209,
		1,0,0,0,210,211,1,0,0,0,211,33,1,0,0,0,212,216,5,9,0,0,213,215,3,8,4,0,
		214,213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,
		1,0,0,0,218,216,1,0,0,0,219,220,5,10,0,0,220,35,1,0,0,0,221,222,3,92,46,
		0,222,37,1,0,0,0,223,224,5,16,0,0,224,225,3,36,18,0,225,39,1,0,0,0,226,
		227,5,17,0,0,227,228,3,36,18,0,228,41,1,0,0,0,229,238,3,36,18,0,230,238,
		3,38,19,0,231,238,3,40,20,0,232,238,3,56,28,0,233,238,3,96,48,0,234,238,
		3,94,47,0,235,238,3,46,23,0,236,238,3,44,22,0,237,229,1,0,0,0,237,230,
		1,0,0,0,237,231,1,0,0,0,237,232,1,0,0,0,237,233,1,0,0,0,237,234,1,0,0,
		0,237,235,1,0,0,0,237,236,1,0,0,0,238,43,1,0,0,0,239,240,7,0,0,0,240,45,
		1,0,0,0,241,242,5,34,0,0,242,243,3,84,42,0,243,244,5,35,0,0,244,245,3,
		66,33,0,245,47,1,0,0,0,246,247,7,1,0,0,247,248,3,42,21,0,248,49,1,0,0,
		0,249,250,5,40,0,0,250,51,1,0,0,0,251,253,5,41,0,0,252,254,3,50,25,0,253,
		252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,3,84,42,0,256,257,
		3,66,33,0,257,266,1,0,0,0,258,260,5,42,0,0,259,261,3,50,25,0,260,259,1,
		0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,263,3,84,42,0,263,264,3,66,33,
		0,264,266,1,0,0,0,265,251,1,0,0,0,265,258,1,0,0,0,266,53,1,0,0,0,267,268,
		5,43,0,0,268,269,3,84,42,0,269,270,3,66,33,0,270,55,1,0,0,0,271,272,5,
		34,0,0,272,273,3,66,33,0,273,274,5,35,0,0,274,57,1,0,0,0,275,276,5,44,
		0,0,276,281,3,84,42,0,277,278,5,45,0,0,278,280,3,84,42,0,279,277,1,0,0,
		0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,
		281,1,0,0,0,284,285,5,46,0,0,285,59,1,0,0,0,286,288,3,92,46,0,287,289,
		3,58,29,0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,299,5,34,
		0,0,291,296,3,66,33,0,292,293,5,45,0,0,293,295,3,66,33,0,294,292,1,0,0,
		0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,300,1,0,0,0,298,
		296,1,0,0,0,299,291,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,302,5,
		35,0,0,302,61,1,0,0,0,303,304,5,47,0,0,304,63,1,0,0,0,305,306,5,48,0,0,
		306,65,1,0,0,0,307,308,6,33,-1,0,308,318,3,60,30,0,309,318,3,10,5,0,310,
		318,3,42,21,0,311,318,3,48,24,0,312,318,3,52,26,0,313,318,3,54,27,0,314,
		318,3,6,3,0,315,318,3,62,31,0,316,318,3,64,32,0,317,307,1,0,0,0,317,309,
		1,0,0,0,317,310,1,0,0,0,317,311,1,0,0,0,317,312,1,0,0,0,317,313,1,0,0,
		0,317,314,1,0,0,0,317,315,1,0,0,0,317,316,1,0,0,0,318,360,1,0,0,0,319,
		320,10,12,0,0,320,321,7,2,0,0,321,359,3,66,33,13,322,323,10,11,0,0,323,
		324,7,3,0,0,324,359,3,66,33,12,325,326,10,10,0,0,326,327,7,4,0,0,327,359,
		3,66,33,11,328,329,10,9,0,0,329,330,7,5,0,0,330,359,3,66,33,10,331,332,
		10,8,0,0,332,333,7,6,0,0,333,359,3,66,33,9,334,335,10,7,0,0,335,336,7,
		7,0,0,336,359,3,66,33,8,337,338,10,6,0,0,338,339,5,80,0,0,339,359,3,66,
		33,7,340,341,10,5,0,0,341,342,5,81,0,0,342,359,3,66,33,6,343,344,10,4,
		0,0,344,345,5,82,0,0,345,359,3,66,33,5,346,347,10,3,0,0,347,348,5,83,0,
		0,348,359,3,66,33,4,349,350,10,2,0,0,350,351,5,84,0,0,351,359,3,66,33,
		3,352,353,10,1,0,0,353,354,5,85,0,0,354,355,3,66,33,0,355,356,5,6,0,0,
		356,357,3,66,33,2,357,359,1,0,0,0,358,319,1,0,0,0,358,322,1,0,0,0,358,
		325,1,0,0,0,358,328,1,0,0,0,358,331,1,0,0,0,358,334,1,0,0,0,358,337,1,
		0,0,0,358,340,1,0,0,0,358,343,1,0,0,0,358,346,1,0,0,0,358,349,1,0,0,0,
		358,352,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,67,
		1,0,0,0,362,360,1,0,0,0,363,364,5,75,0,0,364,368,3,96,48,0,365,366,5,74,
		0,0,366,368,3,96,48,0,367,363,1,0,0,0,367,365,1,0,0,0,368,69,1,0,0,0,369,
		371,3,92,46,0,370,372,3,68,34,0,371,370,1,0,0,0,371,372,1,0,0,0,372,375,
		1,0,0,0,373,375,3,96,48,0,374,369,1,0,0,0,374,373,1,0,0,0,375,71,1,0,0,
		0,376,380,5,34,0,0,377,379,3,70,35,0,378,377,1,0,0,0,379,382,1,0,0,0,380,
		378,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,382,380,1,0,0,0,383,384,5,
		35,0,0,384,73,1,0,0,0,385,386,5,86,0,0,386,387,3,96,48,0,387,388,3,92,
		46,0,388,389,3,72,36,0,389,390,3,34,17,0,390,75,1,0,0,0,391,392,3,74,37,
		0,392,77,1,0,0,0,393,394,3,84,42,0,394,395,3,92,46,0,395,79,1,0,0,0,396,
		401,3,78,39,0,397,398,5,45,0,0,398,400,3,78,39,0,399,397,1,0,0,0,400,403,
		1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,81,1,0,0,0,403,401,1,0,0,0,
		404,407,3,34,17,0,405,407,5,16,0,0,406,404,1,0,0,0,406,405,1,0,0,0,407,
		83,1,0,0,0,408,412,3,98,49,0,409,412,3,100,50,0,410,412,3,88,44,0,411,
		408,1,0,0,0,411,409,1,0,0,0,411,410,1,0,0,0,412,85,1,0,0,0,413,418,3,84,
		42,0,414,415,5,45,0,0,415,417,3,84,42,0,416,414,1,0,0,0,417,420,1,0,0,
		0,418,416,1,0,0,0,418,419,1,0,0,0,419,87,1,0,0,0,420,418,1,0,0,0,421,432,
		5,87,0,0,422,423,5,34,0,0,423,424,3,84,42,0,424,426,5,34,0,0,425,427,3,
		86,43,0,426,425,1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,429,5,35,0,
		0,429,430,5,35,0,0,430,432,1,0,0,0,431,421,1,0,0,0,431,422,1,0,0,0,432,
		89,1,0,0,0,433,434,3,84,42,0,434,436,3,92,46,0,435,437,3,58,29,0,436,435,
		1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,440,5,34,0,0,439,441,3,80,
		40,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,443,5,35,0,0,
		443,444,3,82,41,0,444,91,1,0,0,0,445,446,5,103,0,0,446,93,1,0,0,0,447,
		448,7,8,0,0,448,95,1,0,0,0,449,450,7,9,0,0,450,97,1,0,0,0,451,458,5,90,
		0,0,452,458,5,91,0,0,453,458,5,92,0,0,454,458,5,93,0,0,455,458,5,94,0,
		0,456,458,3,92,46,0,457,451,1,0,0,0,457,452,1,0,0,0,457,453,1,0,0,0,457,
		454,1,0,0,0,457,455,1,0,0,0,457,456,1,0,0,0,458,99,1,0,0,0,459,460,7,10,
		0,0,460,101,1,0,0,0,461,462,5,5,0,0,462,463,3,66,33,0,463,464,5,6,0,0,
		464,465,3,106,53,0,465,103,1,0,0,0,466,467,5,8,0,0,467,468,3,66,33,0,468,
		469,5,9,0,0,469,474,3,102,51,0,470,471,5,45,0,0,471,473,3,102,51,0,472,
		470,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,477,1,
		0,0,0,476,474,1,0,0,0,477,478,5,10,0,0,478,105,1,0,0,0,479,482,3,98,49,
		0,480,482,3,104,52,0,481,479,1,0,0,0,481,480,1,0,0,0,482,107,1,0,0,0,483,
		484,5,99,0,0,484,485,3,92,46,0,485,486,5,12,0,0,486,490,3,106,53,0,487,
		489,3,8,4,0,488,487,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,1,
		0,0,0,491,109,1,0,0,0,492,490,1,0,0,0,493,494,3,84,42,0,494,495,3,92,46,
		0,495,111,1,0,0,0,496,497,3,84,42,0,497,498,3,92,46,0,498,499,5,12,0,0,
		499,500,3,66,33,0,500,113,1,0,0,0,501,504,3,110,55,0,502,504,3,112,56,
		0,503,501,1,0,0,0,503,502,1,0,0,0,504,115,1,0,0,0,37,119,126,152,171,184,
		191,205,210,216,237,253,260,265,281,288,296,299,317,358,360,367,371,374,
		380,401,406,411,418,426,431,436,440,457,474,481,490,503
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
